// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_68k.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5f68k_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5f68k_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_debug_5fproto_5f68k_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_debug_5fproto_5f68k_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_debug_5fproto_5f68k_2eproto;
namespace idadebug {
class AnyRegValue;
struct AnyRegValueDefaultTypeInternal;
extern AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
class Callstack;
struct CallstackDefaultTypeInternal;
extern CallstackDefaultTypeInternal _Callstack_default_instance_;
class Changed;
struct ChangedDefaultTypeInternal;
extern ChangedDefaultTypeInternal _Changed_default_instance_;
class Changed_ChangedEntry_DoNotUse;
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal;
extern Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
class DbgBreakpoint;
struct DbgBreakpointDefaultTypeInternal;
extern DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
class DbgBreakpoints;
struct DbgBreakpointsDefaultTypeInternal;
extern DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
class DmaInfo;
struct DmaInfoDefaultTypeInternal;
extern DmaInfoDefaultTypeInternal _DmaInfo_default_instance_;
class GpReg;
struct GpRegDefaultTypeInternal;
extern GpRegDefaultTypeInternal _GpReg_default_instance_;
class GpRegValue;
struct GpRegValueDefaultTypeInternal;
extern GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
class GpRegs;
struct GpRegsDefaultTypeInternal;
extern GpRegsDefaultTypeInternal _GpRegs_default_instance_;
class MemData;
struct MemDataDefaultTypeInternal;
extern MemDataDefaultTypeInternal _MemData_default_instance_;
class MemoryAD;
struct MemoryADDefaultTypeInternal;
extern MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
class MemoryAS;
struct MemoryASDefaultTypeInternal;
extern MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
class PauseChanged;
struct PauseChangedDefaultTypeInternal;
extern PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
class PauseChanged_ChangedEntry_DoNotUse;
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal;
extern PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
class VdpReg;
struct VdpRegDefaultTypeInternal;
extern VdpRegDefaultTypeInternal _VdpReg_default_instance_;
class VdpRegValue;
struct VdpRegValueDefaultTypeInternal;
extern VdpRegValueDefaultTypeInternal _VdpRegValue_default_instance_;
class VdpRegs;
struct VdpRegsDefaultTypeInternal;
extern VdpRegsDefaultTypeInternal _VdpRegs_default_instance_;
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> ::idadebug::AnyRegValue* Arena::CreateMaybeMessage<::idadebug::AnyRegValue>(Arena*);
template<> ::idadebug::Callstack* Arena::CreateMaybeMessage<::idadebug::Callstack>(Arena*);
template<> ::idadebug::Changed* Arena::CreateMaybeMessage<::idadebug::Changed>(Arena*);
template<> ::idadebug::Changed_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage<::idadebug::Changed_ChangedEntry_DoNotUse>(Arena*);
template<> ::idadebug::DbgBreakpoint* Arena::CreateMaybeMessage<::idadebug::DbgBreakpoint>(Arena*);
template<> ::idadebug::DbgBreakpoints* Arena::CreateMaybeMessage<::idadebug::DbgBreakpoints>(Arena*);
template<> ::idadebug::DmaInfo* Arena::CreateMaybeMessage<::idadebug::DmaInfo>(Arena*);
template<> ::idadebug::GpReg* Arena::CreateMaybeMessage<::idadebug::GpReg>(Arena*);
template<> ::idadebug::GpRegValue* Arena::CreateMaybeMessage<::idadebug::GpRegValue>(Arena*);
template<> ::idadebug::GpRegs* Arena::CreateMaybeMessage<::idadebug::GpRegs>(Arena*);
template<> ::idadebug::MemData* Arena::CreateMaybeMessage<::idadebug::MemData>(Arena*);
template<> ::idadebug::MemoryAD* Arena::CreateMaybeMessage<::idadebug::MemoryAD>(Arena*);
template<> ::idadebug::MemoryAS* Arena::CreateMaybeMessage<::idadebug::MemoryAS>(Arena*);
template<> ::idadebug::PauseChanged* Arena::CreateMaybeMessage<::idadebug::PauseChanged>(Arena*);
template<> ::idadebug::PauseChanged_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage<::idadebug::PauseChanged_ChangedEntry_DoNotUse>(Arena*);
template<> ::idadebug::VdpReg* Arena::CreateMaybeMessage<::idadebug::VdpReg>(Arena*);
template<> ::idadebug::VdpRegValue* Arena::CreateMaybeMessage<::idadebug::VdpRegValue>(Arena*);
template<> ::idadebug::VdpRegs* Arena::CreateMaybeMessage<::idadebug::VdpRegs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idadebug {

enum GpRegsEnum : int {
  D0 = 0,
  D1 = 1,
  D2 = 2,
  D3 = 3,
  D4 = 4,
  D5 = 5,
  D6 = 6,
  D7 = 7,
  A0 = 8,
  A1 = 10,
  A2 = 12,
  A3 = 14,
  A4 = 16,
  A5 = 18,
  A6 = 20,
  A7 = 22,
  PC = 24,
  SP = 26,
  SR = 28,
  GpRegsEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpRegsEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpRegsEnum_IsValid(int value);
constexpr GpRegsEnum GpRegsEnum_MIN = D0;
constexpr GpRegsEnum GpRegsEnum_MAX = SR;
constexpr int GpRegsEnum_ARRAYSIZE = GpRegsEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpRegsEnum_descriptor();
template<typename T>
inline const std::string& GpRegsEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpRegsEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpRegsEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpRegsEnum_descriptor(), enum_t_value);
}
inline bool GpRegsEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpRegsEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpRegsEnum>(
    GpRegsEnum_descriptor(), name, value);
}
enum VdpRegsEnum : int {
  V00 = 0,
  V01 = 1,
  V02 = 2,
  V03 = 3,
  V04 = 4,
  V05 = 5,
  V06 = 6,
  V07 = 7,
  V08 = 8,
  V09 = 9,
  V0A = 10,
  V0B = 11,
  V0C = 12,
  V0D = 13,
  V0E = 14,
  V0F = 15,
  V10 = 16,
  V11 = 17,
  V12 = 18,
  V13 = 19,
  V14 = 20,
  V15 = 21,
  V16 = 22,
  V17 = 23,
  VdpRegsEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VdpRegsEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VdpRegsEnum_IsValid(int value);
constexpr VdpRegsEnum VdpRegsEnum_MIN = V00;
constexpr VdpRegsEnum VdpRegsEnum_MAX = V17;
constexpr int VdpRegsEnum_ARRAYSIZE = VdpRegsEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VdpRegsEnum_descriptor();
template<typename T>
inline const std::string& VdpRegsEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VdpRegsEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VdpRegsEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VdpRegsEnum_descriptor(), enum_t_value);
}
inline bool VdpRegsEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VdpRegsEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VdpRegsEnum>(
    VdpRegsEnum_descriptor(), name, value);
}
enum BpType : int {
  DUMMY = 0,
  BP_PC = 1,
  BP_READ = 2,
  BP_WRITE = 3,
  BpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BpType_IsValid(int value);
constexpr BpType BpType_MIN = DUMMY;
constexpr BpType BpType_MAX = BP_WRITE;
constexpr int BpType_ARRAYSIZE = BpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BpType_descriptor();
template<typename T>
inline const std::string& BpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BpType_descriptor(), enum_t_value);
}
inline bool BpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BpType>(
    BpType_descriptor(), name, value);
}
// ===================================================================

class GpReg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.GpReg) */ {
 public:
  inline GpReg() : GpReg(nullptr) {}
  ~GpReg() override;
  explicit PROTOBUF_CONSTEXPR GpReg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpReg(const GpReg& from);
  GpReg(GpReg&& from) noexcept
    : GpReg() {
    *this = ::std::move(from);
  }

  inline GpReg& operator=(const GpReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpReg& operator=(GpReg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpReg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpReg* internal_default_instance() {
    return reinterpret_cast<const GpReg*>(
               &_GpReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpReg& a, GpReg& b) {
    a.Swap(&b);
  }
  inline void Swap(GpReg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpReg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpReg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpReg& from) {
    GpReg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpReg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpReg";
  }
  protected:
  explicit GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegFieldNumber = 1,
  };
  // .idadebug.GpRegsEnum reg = 1;
  void clear_reg();
  ::idadebug::GpRegsEnum reg() const;
  void set_reg(::idadebug::GpRegsEnum value);
  private:
  ::idadebug::GpRegsEnum _internal_reg() const;
  void _internal_set_reg(::idadebug::GpRegsEnum value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int reg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class GpRegs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.GpRegs) */ {
 public:
  inline GpRegs() : GpRegs(nullptr) {}
  ~GpRegs() override;
  explicit PROTOBUF_CONSTEXPR GpRegs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpRegs(const GpRegs& from);
  GpRegs(GpRegs&& from) noexcept
    : GpRegs() {
    *this = ::std::move(from);
  }

  inline GpRegs& operator=(const GpRegs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpRegs& operator=(GpRegs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpRegs& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpRegs* internal_default_instance() {
    return reinterpret_cast<const GpRegs*>(
               &_GpRegs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpRegs& a, GpRegs& b) {
    a.Swap(&b);
  }
  inline void Swap(GpRegs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpRegs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpRegs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpRegs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpRegs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpRegs& from) {
    GpRegs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpRegs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpRegs";
  }
  protected:
  explicit GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kD0FieldNumber = 1,
    kD1FieldNumber = 2,
    kD2FieldNumber = 3,
    kD3FieldNumber = 4,
    kD4FieldNumber = 5,
    kD5FieldNumber = 6,
    kD6FieldNumber = 7,
    kD7FieldNumber = 8,
    kA0FieldNumber = 9,
    kA1FieldNumber = 10,
    kA2FieldNumber = 11,
    kA3FieldNumber = 12,
    kA4FieldNumber = 13,
    kA5FieldNumber = 14,
    kA6FieldNumber = 15,
    kA7FieldNumber = 16,
    kPCFieldNumber = 17,
    kSPFieldNumber = 18,
    kSRFieldNumber = 19,
  };
  // uint32 D0 = 1;
  void clear_d0();
  uint32_t d0() const;
  void set_d0(uint32_t value);
  private:
  uint32_t _internal_d0() const;
  void _internal_set_d0(uint32_t value);
  public:

  // uint32 D1 = 2;
  void clear_d1();
  uint32_t d1() const;
  void set_d1(uint32_t value);
  private:
  uint32_t _internal_d1() const;
  void _internal_set_d1(uint32_t value);
  public:

  // uint32 D2 = 3;
  void clear_d2();
  uint32_t d2() const;
  void set_d2(uint32_t value);
  private:
  uint32_t _internal_d2() const;
  void _internal_set_d2(uint32_t value);
  public:

  // uint32 D3 = 4;
  void clear_d3();
  uint32_t d3() const;
  void set_d3(uint32_t value);
  private:
  uint32_t _internal_d3() const;
  void _internal_set_d3(uint32_t value);
  public:

  // uint32 D4 = 5;
  void clear_d4();
  uint32_t d4() const;
  void set_d4(uint32_t value);
  private:
  uint32_t _internal_d4() const;
  void _internal_set_d4(uint32_t value);
  public:

  // uint32 D5 = 6;
  void clear_d5();
  uint32_t d5() const;
  void set_d5(uint32_t value);
  private:
  uint32_t _internal_d5() const;
  void _internal_set_d5(uint32_t value);
  public:

  // uint32 D6 = 7;
  void clear_d6();
  uint32_t d6() const;
  void set_d6(uint32_t value);
  private:
  uint32_t _internal_d6() const;
  void _internal_set_d6(uint32_t value);
  public:

  // uint32 D7 = 8;
  void clear_d7();
  uint32_t d7() const;
  void set_d7(uint32_t value);
  private:
  uint32_t _internal_d7() const;
  void _internal_set_d7(uint32_t value);
  public:

  // uint32 A0 = 9;
  void clear_a0();
  uint32_t a0() const;
  void set_a0(uint32_t value);
  private:
  uint32_t _internal_a0() const;
  void _internal_set_a0(uint32_t value);
  public:

  // uint32 A1 = 10;
  void clear_a1();
  uint32_t a1() const;
  void set_a1(uint32_t value);
  private:
  uint32_t _internal_a1() const;
  void _internal_set_a1(uint32_t value);
  public:

  // uint32 A2 = 11;
  void clear_a2();
  uint32_t a2() const;
  void set_a2(uint32_t value);
  private:
  uint32_t _internal_a2() const;
  void _internal_set_a2(uint32_t value);
  public:

  // uint32 A3 = 12;
  void clear_a3();
  uint32_t a3() const;
  void set_a3(uint32_t value);
  private:
  uint32_t _internal_a3() const;
  void _internal_set_a3(uint32_t value);
  public:

  // uint32 A4 = 13;
  void clear_a4();
  uint32_t a4() const;
  void set_a4(uint32_t value);
  private:
  uint32_t _internal_a4() const;
  void _internal_set_a4(uint32_t value);
  public:

  // uint32 A5 = 14;
  void clear_a5();
  uint32_t a5() const;
  void set_a5(uint32_t value);
  private:
  uint32_t _internal_a5() const;
  void _internal_set_a5(uint32_t value);
  public:

  // uint32 A6 = 15;
  void clear_a6();
  uint32_t a6() const;
  void set_a6(uint32_t value);
  private:
  uint32_t _internal_a6() const;
  void _internal_set_a6(uint32_t value);
  public:

  // uint32 A7 = 16;
  void clear_a7();
  uint32_t a7() const;
  void set_a7(uint32_t value);
  private:
  uint32_t _internal_a7() const;
  void _internal_set_a7(uint32_t value);
  public:

  // uint32 PC = 17;
  void clear_pc();
  uint32_t pc() const;
  void set_pc(uint32_t value);
  private:
  uint32_t _internal_pc() const;
  void _internal_set_pc(uint32_t value);
  public:

  // uint32 SP = 18;
  void clear_sp();
  uint32_t sp() const;
  void set_sp(uint32_t value);
  private:
  uint32_t _internal_sp() const;
  void _internal_set_sp(uint32_t value);
  public:

  // uint32 SR = 19;
  void clear_sr();
  uint32_t sr() const;
  void set_sr(uint32_t value);
  private:
  uint32_t _internal_sr() const;
  void _internal_set_sr(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpRegs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t d0_;
    uint32_t d1_;
    uint32_t d2_;
    uint32_t d3_;
    uint32_t d4_;
    uint32_t d5_;
    uint32_t d6_;
    uint32_t d7_;
    uint32_t a0_;
    uint32_t a1_;
    uint32_t a2_;
    uint32_t a3_;
    uint32_t a4_;
    uint32_t a5_;
    uint32_t a6_;
    uint32_t a7_;
    uint32_t pc_;
    uint32_t sp_;
    uint32_t sr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class GpRegValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.GpRegValue) */ {
 public:
  inline GpRegValue() : GpRegValue(nullptr) {}
  ~GpRegValue() override;
  explicit PROTOBUF_CONSTEXPR GpRegValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpRegValue(const GpRegValue& from);
  GpRegValue(GpRegValue&& from) noexcept
    : GpRegValue() {
    *this = ::std::move(from);
  }

  inline GpRegValue& operator=(const GpRegValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpRegValue& operator=(GpRegValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpRegValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpRegValue* internal_default_instance() {
    return reinterpret_cast<const GpRegValue*>(
               &_GpRegValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GpRegValue& a, GpRegValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GpRegValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpRegValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpRegValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpRegValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpRegValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GpRegValue& from) {
    GpRegValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpRegValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpRegValue";
  }
  protected:
  explicit GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .idadebug.GpRegsEnum index = 1;
  void clear_index();
  ::idadebug::GpRegsEnum index() const;
  void set_index(::idadebug::GpRegsEnum value);
  private:
  ::idadebug::GpRegsEnum _internal_index() const;
  void _internal_set_index(::idadebug::GpRegsEnum value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpRegValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int index_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class VdpReg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.VdpReg) */ {
 public:
  inline VdpReg() : VdpReg(nullptr) {}
  ~VdpReg() override;
  explicit PROTOBUF_CONSTEXPR VdpReg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VdpReg(const VdpReg& from);
  VdpReg(VdpReg&& from) noexcept
    : VdpReg() {
    *this = ::std::move(from);
  }

  inline VdpReg& operator=(const VdpReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline VdpReg& operator=(VdpReg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VdpReg& default_instance() {
    return *internal_default_instance();
  }
  static inline const VdpReg* internal_default_instance() {
    return reinterpret_cast<const VdpReg*>(
               &_VdpReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VdpReg& a, VdpReg& b) {
    a.Swap(&b);
  }
  inline void Swap(VdpReg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VdpReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VdpReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VdpReg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VdpReg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VdpReg& from) {
    VdpReg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VdpReg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.VdpReg";
  }
  protected:
  explicit VdpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegFieldNumber = 1,
  };
  // .idadebug.VdpRegsEnum reg = 1;
  void clear_reg();
  ::idadebug::VdpRegsEnum reg() const;
  void set_reg(::idadebug::VdpRegsEnum value);
  private:
  ::idadebug::VdpRegsEnum _internal_reg() const;
  void _internal_set_reg(::idadebug::VdpRegsEnum value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.VdpReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int reg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class VdpRegs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.VdpRegs) */ {
 public:
  inline VdpRegs() : VdpRegs(nullptr) {}
  ~VdpRegs() override;
  explicit PROTOBUF_CONSTEXPR VdpRegs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VdpRegs(const VdpRegs& from);
  VdpRegs(VdpRegs&& from) noexcept
    : VdpRegs() {
    *this = ::std::move(from);
  }

  inline VdpRegs& operator=(const VdpRegs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VdpRegs& operator=(VdpRegs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VdpRegs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VdpRegs* internal_default_instance() {
    return reinterpret_cast<const VdpRegs*>(
               &_VdpRegs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VdpRegs& a, VdpRegs& b) {
    a.Swap(&b);
  }
  inline void Swap(VdpRegs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VdpRegs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VdpRegs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VdpRegs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VdpRegs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VdpRegs& from) {
    VdpRegs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VdpRegs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.VdpRegs";
  }
  protected:
  explicit VdpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV00FieldNumber = 1,
    kV01FieldNumber = 2,
    kV02FieldNumber = 3,
    kV03FieldNumber = 4,
    kV04FieldNumber = 5,
    kV05FieldNumber = 6,
    kV06FieldNumber = 7,
    kV07FieldNumber = 8,
    kV08FieldNumber = 9,
    kV09FieldNumber = 10,
    kV0AFieldNumber = 11,
    kV0BFieldNumber = 12,
    kV0CFieldNumber = 13,
    kV0DFieldNumber = 14,
    kV0EFieldNumber = 15,
    kV0FFieldNumber = 16,
    kV10FieldNumber = 17,
    kV11FieldNumber = 18,
    kV12FieldNumber = 19,
    kV13FieldNumber = 20,
    kV14FieldNumber = 21,
    kV15FieldNumber = 22,
    kV16FieldNumber = 23,
    kV17FieldNumber = 24,
  };
  // uint32 V00 = 1;
  void clear_v00();
  uint32_t v00() const;
  void set_v00(uint32_t value);
  private:
  uint32_t _internal_v00() const;
  void _internal_set_v00(uint32_t value);
  public:

  // uint32 V01 = 2;
  void clear_v01();
  uint32_t v01() const;
  void set_v01(uint32_t value);
  private:
  uint32_t _internal_v01() const;
  void _internal_set_v01(uint32_t value);
  public:

  // uint32 V02 = 3;
  void clear_v02();
  uint32_t v02() const;
  void set_v02(uint32_t value);
  private:
  uint32_t _internal_v02() const;
  void _internal_set_v02(uint32_t value);
  public:

  // uint32 V03 = 4;
  void clear_v03();
  uint32_t v03() const;
  void set_v03(uint32_t value);
  private:
  uint32_t _internal_v03() const;
  void _internal_set_v03(uint32_t value);
  public:

  // uint32 V04 = 5;
  void clear_v04();
  uint32_t v04() const;
  void set_v04(uint32_t value);
  private:
  uint32_t _internal_v04() const;
  void _internal_set_v04(uint32_t value);
  public:

  // uint32 V05 = 6;
  void clear_v05();
  uint32_t v05() const;
  void set_v05(uint32_t value);
  private:
  uint32_t _internal_v05() const;
  void _internal_set_v05(uint32_t value);
  public:

  // uint32 V06 = 7;
  void clear_v06();
  uint32_t v06() const;
  void set_v06(uint32_t value);
  private:
  uint32_t _internal_v06() const;
  void _internal_set_v06(uint32_t value);
  public:

  // uint32 V07 = 8;
  void clear_v07();
  uint32_t v07() const;
  void set_v07(uint32_t value);
  private:
  uint32_t _internal_v07() const;
  void _internal_set_v07(uint32_t value);
  public:

  // uint32 V08 = 9;
  void clear_v08();
  uint32_t v08() const;
  void set_v08(uint32_t value);
  private:
  uint32_t _internal_v08() const;
  void _internal_set_v08(uint32_t value);
  public:

  // uint32 V09 = 10;
  void clear_v09();
  uint32_t v09() const;
  void set_v09(uint32_t value);
  private:
  uint32_t _internal_v09() const;
  void _internal_set_v09(uint32_t value);
  public:

  // uint32 V0A = 11;
  void clear_v0a();
  uint32_t v0a() const;
  void set_v0a(uint32_t value);
  private:
  uint32_t _internal_v0a() const;
  void _internal_set_v0a(uint32_t value);
  public:

  // uint32 V0B = 12;
  void clear_v0b();
  uint32_t v0b() const;
  void set_v0b(uint32_t value);
  private:
  uint32_t _internal_v0b() const;
  void _internal_set_v0b(uint32_t value);
  public:

  // uint32 V0C = 13;
  void clear_v0c();
  uint32_t v0c() const;
  void set_v0c(uint32_t value);
  private:
  uint32_t _internal_v0c() const;
  void _internal_set_v0c(uint32_t value);
  public:

  // uint32 V0D = 14;
  void clear_v0d();
  uint32_t v0d() const;
  void set_v0d(uint32_t value);
  private:
  uint32_t _internal_v0d() const;
  void _internal_set_v0d(uint32_t value);
  public:

  // uint32 V0E = 15;
  void clear_v0e();
  uint32_t v0e() const;
  void set_v0e(uint32_t value);
  private:
  uint32_t _internal_v0e() const;
  void _internal_set_v0e(uint32_t value);
  public:

  // uint32 V0F = 16;
  void clear_v0f();
  uint32_t v0f() const;
  void set_v0f(uint32_t value);
  private:
  uint32_t _internal_v0f() const;
  void _internal_set_v0f(uint32_t value);
  public:

  // uint32 V10 = 17;
  void clear_v10();
  uint32_t v10() const;
  void set_v10(uint32_t value);
  private:
  uint32_t _internal_v10() const;
  void _internal_set_v10(uint32_t value);
  public:

  // uint32 V11 = 18;
  void clear_v11();
  uint32_t v11() const;
  void set_v11(uint32_t value);
  private:
  uint32_t _internal_v11() const;
  void _internal_set_v11(uint32_t value);
  public:

  // uint32 V12 = 19;
  void clear_v12();
  uint32_t v12() const;
  void set_v12(uint32_t value);
  private:
  uint32_t _internal_v12() const;
  void _internal_set_v12(uint32_t value);
  public:

  // uint32 V13 = 20;
  void clear_v13();
  uint32_t v13() const;
  void set_v13(uint32_t value);
  private:
  uint32_t _internal_v13() const;
  void _internal_set_v13(uint32_t value);
  public:

  // uint32 V14 = 21;
  void clear_v14();
  uint32_t v14() const;
  void set_v14(uint32_t value);
  private:
  uint32_t _internal_v14() const;
  void _internal_set_v14(uint32_t value);
  public:

  // uint32 V15 = 22;
  void clear_v15();
  uint32_t v15() const;
  void set_v15(uint32_t value);
  private:
  uint32_t _internal_v15() const;
  void _internal_set_v15(uint32_t value);
  public:

  // uint32 V16 = 23;
  void clear_v16();
  uint32_t v16() const;
  void set_v16(uint32_t value);
  private:
  uint32_t _internal_v16() const;
  void _internal_set_v16(uint32_t value);
  public:

  // uint32 V17 = 24;
  void clear_v17();
  uint32_t v17() const;
  void set_v17(uint32_t value);
  private:
  uint32_t _internal_v17() const;
  void _internal_set_v17(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.VdpRegs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t v00_;
    uint32_t v01_;
    uint32_t v02_;
    uint32_t v03_;
    uint32_t v04_;
    uint32_t v05_;
    uint32_t v06_;
    uint32_t v07_;
    uint32_t v08_;
    uint32_t v09_;
    uint32_t v0a_;
    uint32_t v0b_;
    uint32_t v0c_;
    uint32_t v0d_;
    uint32_t v0e_;
    uint32_t v0f_;
    uint32_t v10_;
    uint32_t v11_;
    uint32_t v12_;
    uint32_t v13_;
    uint32_t v14_;
    uint32_t v15_;
    uint32_t v16_;
    uint32_t v17_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class VdpRegValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.VdpRegValue) */ {
 public:
  inline VdpRegValue() : VdpRegValue(nullptr) {}
  ~VdpRegValue() override;
  explicit PROTOBUF_CONSTEXPR VdpRegValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VdpRegValue(const VdpRegValue& from);
  VdpRegValue(VdpRegValue&& from) noexcept
    : VdpRegValue() {
    *this = ::std::move(from);
  }

  inline VdpRegValue& operator=(const VdpRegValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VdpRegValue& operator=(VdpRegValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VdpRegValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const VdpRegValue* internal_default_instance() {
    return reinterpret_cast<const VdpRegValue*>(
               &_VdpRegValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VdpRegValue& a, VdpRegValue& b) {
    a.Swap(&b);
  }
  inline void Swap(VdpRegValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VdpRegValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VdpRegValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VdpRegValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VdpRegValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VdpRegValue& from) {
    VdpRegValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VdpRegValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.VdpRegValue";
  }
  protected:
  explicit VdpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .idadebug.VdpRegsEnum index = 1;
  void clear_index();
  ::idadebug::VdpRegsEnum index() const;
  void set_index(::idadebug::VdpRegsEnum value);
  private:
  ::idadebug::VdpRegsEnum _internal_index() const;
  void _internal_set_index(::idadebug::VdpRegsEnum value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.VdpRegValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int index_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class DmaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.DmaInfo) */ {
 public:
  inline DmaInfo() : DmaInfo(nullptr) {}
  ~DmaInfo() override;
  explicit PROTOBUF_CONSTEXPR DmaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmaInfo(const DmaInfo& from);
  DmaInfo(DmaInfo&& from) noexcept
    : DmaInfo() {
    *this = ::std::move(from);
  }

  inline DmaInfo& operator=(const DmaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmaInfo& operator=(DmaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmaInfo* internal_default_instance() {
    return reinterpret_cast<const DmaInfo*>(
               &_DmaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DmaInfo& a, DmaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DmaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmaInfo& from) {
    DmaInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.DmaInfo";
  }
  protected:
  explicit DmaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLenFieldNumber = 1,
    kSrcFieldNumber = 2,
    kDstFieldNumber = 3,
  };
  // uint32 len = 1;
  void clear_len();
  uint32_t len() const;
  void set_len(uint32_t value);
  private:
  uint32_t _internal_len() const;
  void _internal_set_len(uint32_t value);
  public:

  // uint32 src = 2;
  void clear_src();
  uint32_t src() const;
  void set_src(uint32_t value);
  private:
  uint32_t _internal_src() const;
  void _internal_set_src(uint32_t value);
  public:

  // uint32 dst = 3;
  void clear_dst();
  uint32_t dst() const;
  void set_dst(uint32_t value);
  private:
  uint32_t _internal_dst() const;
  void _internal_set_dst(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.DmaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t len_;
    uint32_t src_;
    uint32_t dst_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class MemoryAS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.MemoryAS) */ {
 public:
  inline MemoryAS() : MemoryAS(nullptr) {}
  ~MemoryAS() override;
  explicit PROTOBUF_CONSTEXPR MemoryAS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAS(const MemoryAS& from);
  MemoryAS(MemoryAS&& from) noexcept
    : MemoryAS() {
    *this = ::std::move(from);
  }

  inline MemoryAS& operator=(const MemoryAS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAS& operator=(MemoryAS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryAS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAS* internal_default_instance() {
    return reinterpret_cast<const MemoryAS*>(
               &_MemoryAS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MemoryAS& a, MemoryAS& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryAS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryAS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryAS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryAS& from) {
    MemoryAS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemoryAS";
  }
  protected:
  explicit MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemoryAS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t address_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class MemoryAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.MemoryAD) */ {
 public:
  inline MemoryAD() : MemoryAD(nullptr) {}
  ~MemoryAD() override;
  explicit PROTOBUF_CONSTEXPR MemoryAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAD(const MemoryAD& from);
  MemoryAD(MemoryAD&& from) noexcept
    : MemoryAD() {
    *this = ::std::move(from);
  }

  inline MemoryAD& operator=(const MemoryAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAD& operator=(MemoryAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAD* internal_default_instance() {
    return reinterpret_cast<const MemoryAD*>(
               &_MemoryAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MemoryAD& a, MemoryAD& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryAD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemoryAD& from) {
    MemoryAD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemoryAD";
  }
  protected:
  explicit MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemoryAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class DbgBreakpoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.DbgBreakpoint) */ {
 public:
  inline DbgBreakpoint() : DbgBreakpoint(nullptr) {}
  ~DbgBreakpoint() override;
  explicit PROTOBUF_CONSTEXPR DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbgBreakpoint(const DbgBreakpoint& from);
  DbgBreakpoint(DbgBreakpoint&& from) noexcept
    : DbgBreakpoint() {
    *this = ::std::move(from);
  }

  inline DbgBreakpoint& operator=(const DbgBreakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbgBreakpoint& operator=(DbgBreakpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbgBreakpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbgBreakpoint* internal_default_instance() {
    return reinterpret_cast<const DbgBreakpoint*>(
               &_DbgBreakpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DbgBreakpoint& a, DbgBreakpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DbgBreakpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbgBreakpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbgBreakpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbgBreakpoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbgBreakpoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbgBreakpoint& from) {
    DbgBreakpoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbgBreakpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.DbgBreakpoint";
  }
  protected:
  explicit DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 7,
    kTypeFieldNumber = 1,
    kBstartFieldNumber = 2,
    kBendFieldNumber = 3,
    kEnabledFieldNumber = 4,
    kIsVdpFieldNumber = 5,
    kIsForbidFieldNumber = 6,
  };
  // string condition = 7;
  void clear_condition();
  const std::string& condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_condition();
  PROTOBUF_NODISCARD std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // .idadebug.BpType type = 1;
  void clear_type();
  ::idadebug::BpType type() const;
  void set_type(::idadebug::BpType value);
  private:
  ::idadebug::BpType _internal_type() const;
  void _internal_set_type(::idadebug::BpType value);
  public:

  // uint32 bstart = 2;
  void clear_bstart();
  uint32_t bstart() const;
  void set_bstart(uint32_t value);
  private:
  uint32_t _internal_bstart() const;
  void _internal_set_bstart(uint32_t value);
  public:

  // uint32 bend = 3;
  void clear_bend();
  uint32_t bend() const;
  void set_bend(uint32_t value);
  private:
  uint32_t _internal_bend() const;
  void _internal_set_bend(uint32_t value);
  public:

  // bool enabled = 4;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool is_vdp = 5;
  void clear_is_vdp();
  bool is_vdp() const;
  void set_is_vdp(bool value);
  private:
  bool _internal_is_vdp() const;
  void _internal_set_is_vdp(bool value);
  public:

  // bool is_forbid = 6;
  void clear_is_forbid();
  bool is_forbid() const;
  void set_is_forbid(bool value);
  private:
  bool _internal_is_forbid() const;
  void _internal_set_is_forbid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.DbgBreakpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
    int type_;
    uint32_t bstart_;
    uint32_t bend_;
    bool enabled_;
    bool is_vdp_;
    bool is_forbid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class DbgBreakpoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.DbgBreakpoints) */ {
 public:
  inline DbgBreakpoints() : DbgBreakpoints(nullptr) {}
  ~DbgBreakpoints() override;
  explicit PROTOBUF_CONSTEXPR DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbgBreakpoints(const DbgBreakpoints& from);
  DbgBreakpoints(DbgBreakpoints&& from) noexcept
    : DbgBreakpoints() {
    *this = ::std::move(from);
  }

  inline DbgBreakpoints& operator=(const DbgBreakpoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbgBreakpoints& operator=(DbgBreakpoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbgBreakpoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbgBreakpoints* internal_default_instance() {
    return reinterpret_cast<const DbgBreakpoints*>(
               &_DbgBreakpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DbgBreakpoints& a, DbgBreakpoints& b) {
    a.Swap(&b);
  }
  inline void Swap(DbgBreakpoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbgBreakpoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbgBreakpoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbgBreakpoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbgBreakpoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbgBreakpoints& from) {
    DbgBreakpoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbgBreakpoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.DbgBreakpoints";
  }
  protected:
  explicit DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .idadebug.DbgBreakpoint list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::idadebug::DbgBreakpoint* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >*
      mutable_list();
  private:
  const ::idadebug::DbgBreakpoint& _internal_list(int index) const;
  ::idadebug::DbgBreakpoint* _internal_add_list();
  public:
  const ::idadebug::DbgBreakpoint& list(int index) const;
  ::idadebug::DbgBreakpoint* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >&
      list() const;

  // @@protoc_insertion_point(class_scope:idadebug.DbgBreakpoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class Callstack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.Callstack) */ {
 public:
  inline Callstack() : Callstack(nullptr) {}
  ~Callstack() override;
  explicit PROTOBUF_CONSTEXPR Callstack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Callstack(const Callstack& from);
  Callstack(Callstack&& from) noexcept
    : Callstack() {
    *this = ::std::move(from);
  }

  inline Callstack& operator=(const Callstack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Callstack& operator=(Callstack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Callstack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Callstack* internal_default_instance() {
    return reinterpret_cast<const Callstack*>(
               &_Callstack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Callstack& a, Callstack& b) {
    a.Swap(&b);
  }
  inline void Swap(Callstack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Callstack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Callstack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Callstack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Callstack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Callstack& from) {
    Callstack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Callstack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.Callstack";
  }
  protected:
  explicit Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackFieldNumber = 1,
  };
  // repeated uint32 callstack = 1;
  int callstack_size() const;
  private:
  int _internal_callstack_size() const;
  public:
  void clear_callstack();
  private:
  uint32_t _internal_callstack(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_callstack() const;
  void _internal_add_callstack(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_callstack();
  public:
  uint32_t callstack(int index) const;
  void set_callstack(int index, uint32_t value);
  void add_callstack(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      callstack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_callstack();

  // @@protoc_insertion_point(class_scope:idadebug.Callstack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > callstack_;
    mutable std::atomic<int> _callstack_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class AnyRegValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.AnyRegValue) */ {
 public:
  inline AnyRegValue() : AnyRegValue(nullptr) {}
  ~AnyRegValue() override;
  explicit PROTOBUF_CONSTEXPR AnyRegValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyRegValue(const AnyRegValue& from);
  AnyRegValue(AnyRegValue&& from) noexcept
    : AnyRegValue() {
    *this = ::std::move(from);
  }

  inline AnyRegValue& operator=(const AnyRegValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyRegValue& operator=(AnyRegValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnyRegValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnyRegValue* internal_default_instance() {
    return reinterpret_cast<const AnyRegValue*>(
               &_AnyRegValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AnyRegValue& a, AnyRegValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyRegValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyRegValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnyRegValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnyRegValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnyRegValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnyRegValue& from) {
    AnyRegValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyRegValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.AnyRegValue";
  }
  protected:
  explicit AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.AnyRegValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class MemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.MemData) */ {
 public:
  inline MemData() : MemData(nullptr) {}
  ~MemData() override;
  explicit PROTOBUF_CONSTEXPR MemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemData(const MemData& from);
  MemData(MemData&& from) noexcept
    : MemData() {
    *this = ::std::move(from);
  }

  inline MemData& operator=(const MemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemData& operator=(MemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemData* internal_default_instance() {
    return reinterpret_cast<const MemData*>(
               &_MemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MemData& a, MemData& b) {
    a.Swap(&b);
  }
  inline void Swap(MemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MemData& from) {
    MemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemData";
  }
  protected:
  explicit MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class PauseChanged_ChangedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PauseChanged_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PauseChanged_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PauseChanged_ChangedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other);
  static const PauseChanged_ChangedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PauseChanged_ChangedEntry_DoNotUse*>(&_PauseChanged_ChangedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};

// -------------------------------------------------------------------

class PauseChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.PauseChanged) */ {
 public:
  inline PauseChanged() : PauseChanged(nullptr) {}
  ~PauseChanged() override;
  explicit PROTOBUF_CONSTEXPR PauseChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseChanged(const PauseChanged& from);
  PauseChanged(PauseChanged&& from) noexcept
    : PauseChanged() {
    *this = ::std::move(from);
  }

  inline PauseChanged& operator=(const PauseChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseChanged& operator=(PauseChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PauseChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseChanged* internal_default_instance() {
    return reinterpret_cast<const PauseChanged*>(
               &_PauseChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PauseChanged& a, PauseChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PauseChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PauseChanged& from) {
    PauseChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.PauseChanged";
  }
  protected:
  explicit PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChangedFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // map<uint32, uint32> changed = 2;
  int changed_size() const;
  private:
  int _internal_changed_size() const;
  public:
  void clear_changed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_changed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_changed();

  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.PauseChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PauseChanged_ChangedEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> changed_;
    uint32_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// -------------------------------------------------------------------

class Changed_ChangedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Changed_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Changed_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Changed_ChangedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Changed_ChangedEntry_DoNotUse& other);
  static const Changed_ChangedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Changed_ChangedEntry_DoNotUse*>(&_Changed_ChangedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};

// -------------------------------------------------------------------

class Changed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idadebug.Changed) */ {
 public:
  inline Changed() : Changed(nullptr) {}
  ~Changed() override;
  explicit PROTOBUF_CONSTEXPR Changed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Changed(const Changed& from);
  Changed(Changed&& from) noexcept
    : Changed() {
    *this = ::std::move(from);
  }

  inline Changed& operator=(const Changed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Changed& operator=(Changed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Changed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Changed* internal_default_instance() {
    return reinterpret_cast<const Changed*>(
               &_Changed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Changed& a, Changed& b) {
    a.Swap(&b);
  }
  inline void Swap(Changed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Changed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Changed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Changed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Changed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Changed& from) {
    Changed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Changed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.Changed";
  }
  protected:
  explicit Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChangedFieldNumber = 1,
  };
  // map<uint32, uint32> changed = 1;
  int changed_size() const;
  private:
  int _internal_changed_size() const;
  public:
  void clear_changed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_changed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_changed();

  // @@protoc_insertion_point(class_scope:idadebug.Changed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Changed_ChangedEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> changed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5f68k_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpReg

// .idadebug.GpRegsEnum reg = 1;
inline void GpReg::clear_reg() {
  _impl_.reg_ = 0;
}
inline ::idadebug::GpRegsEnum GpReg::_internal_reg() const {
  return static_cast< ::idadebug::GpRegsEnum >(_impl_.reg_);
}
inline ::idadebug::GpRegsEnum GpReg::reg() const {
  // @@protoc_insertion_point(field_get:idadebug.GpReg.reg)
  return _internal_reg();
}
inline void GpReg::_internal_set_reg(::idadebug::GpRegsEnum value) {
  
  _impl_.reg_ = value;
}
inline void GpReg::set_reg(::idadebug::GpRegsEnum value) {
  _internal_set_reg(value);
  // @@protoc_insertion_point(field_set:idadebug.GpReg.reg)
}

// -------------------------------------------------------------------

// GpRegs

// uint32 D0 = 1;
inline void GpRegs::clear_d0() {
  _impl_.d0_ = 0u;
}
inline uint32_t GpRegs::_internal_d0() const {
  return _impl_.d0_;
}
inline uint32_t GpRegs::d0() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D0)
  return _internal_d0();
}
inline void GpRegs::_internal_set_d0(uint32_t value) {
  
  _impl_.d0_ = value;
}
inline void GpRegs::set_d0(uint32_t value) {
  _internal_set_d0(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D0)
}

// uint32 D1 = 2;
inline void GpRegs::clear_d1() {
  _impl_.d1_ = 0u;
}
inline uint32_t GpRegs::_internal_d1() const {
  return _impl_.d1_;
}
inline uint32_t GpRegs::d1() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D1)
  return _internal_d1();
}
inline void GpRegs::_internal_set_d1(uint32_t value) {
  
  _impl_.d1_ = value;
}
inline void GpRegs::set_d1(uint32_t value) {
  _internal_set_d1(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D1)
}

// uint32 D2 = 3;
inline void GpRegs::clear_d2() {
  _impl_.d2_ = 0u;
}
inline uint32_t GpRegs::_internal_d2() const {
  return _impl_.d2_;
}
inline uint32_t GpRegs::d2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D2)
  return _internal_d2();
}
inline void GpRegs::_internal_set_d2(uint32_t value) {
  
  _impl_.d2_ = value;
}
inline void GpRegs::set_d2(uint32_t value) {
  _internal_set_d2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D2)
}

// uint32 D3 = 4;
inline void GpRegs::clear_d3() {
  _impl_.d3_ = 0u;
}
inline uint32_t GpRegs::_internal_d3() const {
  return _impl_.d3_;
}
inline uint32_t GpRegs::d3() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D3)
  return _internal_d3();
}
inline void GpRegs::_internal_set_d3(uint32_t value) {
  
  _impl_.d3_ = value;
}
inline void GpRegs::set_d3(uint32_t value) {
  _internal_set_d3(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D3)
}

// uint32 D4 = 5;
inline void GpRegs::clear_d4() {
  _impl_.d4_ = 0u;
}
inline uint32_t GpRegs::_internal_d4() const {
  return _impl_.d4_;
}
inline uint32_t GpRegs::d4() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D4)
  return _internal_d4();
}
inline void GpRegs::_internal_set_d4(uint32_t value) {
  
  _impl_.d4_ = value;
}
inline void GpRegs::set_d4(uint32_t value) {
  _internal_set_d4(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D4)
}

// uint32 D5 = 6;
inline void GpRegs::clear_d5() {
  _impl_.d5_ = 0u;
}
inline uint32_t GpRegs::_internal_d5() const {
  return _impl_.d5_;
}
inline uint32_t GpRegs::d5() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D5)
  return _internal_d5();
}
inline void GpRegs::_internal_set_d5(uint32_t value) {
  
  _impl_.d5_ = value;
}
inline void GpRegs::set_d5(uint32_t value) {
  _internal_set_d5(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D5)
}

// uint32 D6 = 7;
inline void GpRegs::clear_d6() {
  _impl_.d6_ = 0u;
}
inline uint32_t GpRegs::_internal_d6() const {
  return _impl_.d6_;
}
inline uint32_t GpRegs::d6() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D6)
  return _internal_d6();
}
inline void GpRegs::_internal_set_d6(uint32_t value) {
  
  _impl_.d6_ = value;
}
inline void GpRegs::set_d6(uint32_t value) {
  _internal_set_d6(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D6)
}

// uint32 D7 = 8;
inline void GpRegs::clear_d7() {
  _impl_.d7_ = 0u;
}
inline uint32_t GpRegs::_internal_d7() const {
  return _impl_.d7_;
}
inline uint32_t GpRegs::d7() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D7)
  return _internal_d7();
}
inline void GpRegs::_internal_set_d7(uint32_t value) {
  
  _impl_.d7_ = value;
}
inline void GpRegs::set_d7(uint32_t value) {
  _internal_set_d7(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D7)
}

// uint32 A0 = 9;
inline void GpRegs::clear_a0() {
  _impl_.a0_ = 0u;
}
inline uint32_t GpRegs::_internal_a0() const {
  return _impl_.a0_;
}
inline uint32_t GpRegs::a0() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A0)
  return _internal_a0();
}
inline void GpRegs::_internal_set_a0(uint32_t value) {
  
  _impl_.a0_ = value;
}
inline void GpRegs::set_a0(uint32_t value) {
  _internal_set_a0(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A0)
}

// uint32 A1 = 10;
inline void GpRegs::clear_a1() {
  _impl_.a1_ = 0u;
}
inline uint32_t GpRegs::_internal_a1() const {
  return _impl_.a1_;
}
inline uint32_t GpRegs::a1() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A1)
  return _internal_a1();
}
inline void GpRegs::_internal_set_a1(uint32_t value) {
  
  _impl_.a1_ = value;
}
inline void GpRegs::set_a1(uint32_t value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A1)
}

// uint32 A2 = 11;
inline void GpRegs::clear_a2() {
  _impl_.a2_ = 0u;
}
inline uint32_t GpRegs::_internal_a2() const {
  return _impl_.a2_;
}
inline uint32_t GpRegs::a2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A2)
  return _internal_a2();
}
inline void GpRegs::_internal_set_a2(uint32_t value) {
  
  _impl_.a2_ = value;
}
inline void GpRegs::set_a2(uint32_t value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A2)
}

// uint32 A3 = 12;
inline void GpRegs::clear_a3() {
  _impl_.a3_ = 0u;
}
inline uint32_t GpRegs::_internal_a3() const {
  return _impl_.a3_;
}
inline uint32_t GpRegs::a3() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A3)
  return _internal_a3();
}
inline void GpRegs::_internal_set_a3(uint32_t value) {
  
  _impl_.a3_ = value;
}
inline void GpRegs::set_a3(uint32_t value) {
  _internal_set_a3(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A3)
}

// uint32 A4 = 13;
inline void GpRegs::clear_a4() {
  _impl_.a4_ = 0u;
}
inline uint32_t GpRegs::_internal_a4() const {
  return _impl_.a4_;
}
inline uint32_t GpRegs::a4() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A4)
  return _internal_a4();
}
inline void GpRegs::_internal_set_a4(uint32_t value) {
  
  _impl_.a4_ = value;
}
inline void GpRegs::set_a4(uint32_t value) {
  _internal_set_a4(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A4)
}

// uint32 A5 = 14;
inline void GpRegs::clear_a5() {
  _impl_.a5_ = 0u;
}
inline uint32_t GpRegs::_internal_a5() const {
  return _impl_.a5_;
}
inline uint32_t GpRegs::a5() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A5)
  return _internal_a5();
}
inline void GpRegs::_internal_set_a5(uint32_t value) {
  
  _impl_.a5_ = value;
}
inline void GpRegs::set_a5(uint32_t value) {
  _internal_set_a5(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A5)
}

// uint32 A6 = 15;
inline void GpRegs::clear_a6() {
  _impl_.a6_ = 0u;
}
inline uint32_t GpRegs::_internal_a6() const {
  return _impl_.a6_;
}
inline uint32_t GpRegs::a6() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A6)
  return _internal_a6();
}
inline void GpRegs::_internal_set_a6(uint32_t value) {
  
  _impl_.a6_ = value;
}
inline void GpRegs::set_a6(uint32_t value) {
  _internal_set_a6(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A6)
}

// uint32 A7 = 16;
inline void GpRegs::clear_a7() {
  _impl_.a7_ = 0u;
}
inline uint32_t GpRegs::_internal_a7() const {
  return _impl_.a7_;
}
inline uint32_t GpRegs::a7() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A7)
  return _internal_a7();
}
inline void GpRegs::_internal_set_a7(uint32_t value) {
  
  _impl_.a7_ = value;
}
inline void GpRegs::set_a7(uint32_t value) {
  _internal_set_a7(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A7)
}

// uint32 PC = 17;
inline void GpRegs::clear_pc() {
  _impl_.pc_ = 0u;
}
inline uint32_t GpRegs::_internal_pc() const {
  return _impl_.pc_;
}
inline uint32_t GpRegs::pc() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.PC)
  return _internal_pc();
}
inline void GpRegs::_internal_set_pc(uint32_t value) {
  
  _impl_.pc_ = value;
}
inline void GpRegs::set_pc(uint32_t value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.PC)
}

// uint32 SP = 18;
inline void GpRegs::clear_sp() {
  _impl_.sp_ = 0u;
}
inline uint32_t GpRegs::_internal_sp() const {
  return _impl_.sp_;
}
inline uint32_t GpRegs::sp() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.SP)
  return _internal_sp();
}
inline void GpRegs::_internal_set_sp(uint32_t value) {
  
  _impl_.sp_ = value;
}
inline void GpRegs::set_sp(uint32_t value) {
  _internal_set_sp(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.SP)
}

// uint32 SR = 19;
inline void GpRegs::clear_sr() {
  _impl_.sr_ = 0u;
}
inline uint32_t GpRegs::_internal_sr() const {
  return _impl_.sr_;
}
inline uint32_t GpRegs::sr() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.SR)
  return _internal_sr();
}
inline void GpRegs::_internal_set_sr(uint32_t value) {
  
  _impl_.sr_ = value;
}
inline void GpRegs::set_sr(uint32_t value) {
  _internal_set_sr(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.SR)
}

// -------------------------------------------------------------------

// GpRegValue

// .idadebug.GpRegsEnum index = 1;
inline void GpRegValue::clear_index() {
  _impl_.index_ = 0;
}
inline ::idadebug::GpRegsEnum GpRegValue::_internal_index() const {
  return static_cast< ::idadebug::GpRegsEnum >(_impl_.index_);
}
inline ::idadebug::GpRegsEnum GpRegValue::index() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegValue.index)
  return _internal_index();
}
inline void GpRegValue::_internal_set_index(::idadebug::GpRegsEnum value) {
  
  _impl_.index_ = value;
}
inline void GpRegValue::set_index(::idadebug::GpRegsEnum value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegValue.index)
}

// uint32 value = 2;
inline void GpRegValue::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t GpRegValue::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t GpRegValue::value() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegValue.value)
  return _internal_value();
}
inline void GpRegValue::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void GpRegValue::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegValue.value)
}

// -------------------------------------------------------------------

// VdpReg

// .idadebug.VdpRegsEnum reg = 1;
inline void VdpReg::clear_reg() {
  _impl_.reg_ = 0;
}
inline ::idadebug::VdpRegsEnum VdpReg::_internal_reg() const {
  return static_cast< ::idadebug::VdpRegsEnum >(_impl_.reg_);
}
inline ::idadebug::VdpRegsEnum VdpReg::reg() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpReg.reg)
  return _internal_reg();
}
inline void VdpReg::_internal_set_reg(::idadebug::VdpRegsEnum value) {
  
  _impl_.reg_ = value;
}
inline void VdpReg::set_reg(::idadebug::VdpRegsEnum value) {
  _internal_set_reg(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpReg.reg)
}

// -------------------------------------------------------------------

// VdpRegs

// uint32 V00 = 1;
inline void VdpRegs::clear_v00() {
  _impl_.v00_ = 0u;
}
inline uint32_t VdpRegs::_internal_v00() const {
  return _impl_.v00_;
}
inline uint32_t VdpRegs::v00() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V00)
  return _internal_v00();
}
inline void VdpRegs::_internal_set_v00(uint32_t value) {
  
  _impl_.v00_ = value;
}
inline void VdpRegs::set_v00(uint32_t value) {
  _internal_set_v00(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V00)
}

// uint32 V01 = 2;
inline void VdpRegs::clear_v01() {
  _impl_.v01_ = 0u;
}
inline uint32_t VdpRegs::_internal_v01() const {
  return _impl_.v01_;
}
inline uint32_t VdpRegs::v01() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V01)
  return _internal_v01();
}
inline void VdpRegs::_internal_set_v01(uint32_t value) {
  
  _impl_.v01_ = value;
}
inline void VdpRegs::set_v01(uint32_t value) {
  _internal_set_v01(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V01)
}

// uint32 V02 = 3;
inline void VdpRegs::clear_v02() {
  _impl_.v02_ = 0u;
}
inline uint32_t VdpRegs::_internal_v02() const {
  return _impl_.v02_;
}
inline uint32_t VdpRegs::v02() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V02)
  return _internal_v02();
}
inline void VdpRegs::_internal_set_v02(uint32_t value) {
  
  _impl_.v02_ = value;
}
inline void VdpRegs::set_v02(uint32_t value) {
  _internal_set_v02(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V02)
}

// uint32 V03 = 4;
inline void VdpRegs::clear_v03() {
  _impl_.v03_ = 0u;
}
inline uint32_t VdpRegs::_internal_v03() const {
  return _impl_.v03_;
}
inline uint32_t VdpRegs::v03() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V03)
  return _internal_v03();
}
inline void VdpRegs::_internal_set_v03(uint32_t value) {
  
  _impl_.v03_ = value;
}
inline void VdpRegs::set_v03(uint32_t value) {
  _internal_set_v03(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V03)
}

// uint32 V04 = 5;
inline void VdpRegs::clear_v04() {
  _impl_.v04_ = 0u;
}
inline uint32_t VdpRegs::_internal_v04() const {
  return _impl_.v04_;
}
inline uint32_t VdpRegs::v04() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V04)
  return _internal_v04();
}
inline void VdpRegs::_internal_set_v04(uint32_t value) {
  
  _impl_.v04_ = value;
}
inline void VdpRegs::set_v04(uint32_t value) {
  _internal_set_v04(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V04)
}

// uint32 V05 = 6;
inline void VdpRegs::clear_v05() {
  _impl_.v05_ = 0u;
}
inline uint32_t VdpRegs::_internal_v05() const {
  return _impl_.v05_;
}
inline uint32_t VdpRegs::v05() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V05)
  return _internal_v05();
}
inline void VdpRegs::_internal_set_v05(uint32_t value) {
  
  _impl_.v05_ = value;
}
inline void VdpRegs::set_v05(uint32_t value) {
  _internal_set_v05(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V05)
}

// uint32 V06 = 7;
inline void VdpRegs::clear_v06() {
  _impl_.v06_ = 0u;
}
inline uint32_t VdpRegs::_internal_v06() const {
  return _impl_.v06_;
}
inline uint32_t VdpRegs::v06() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V06)
  return _internal_v06();
}
inline void VdpRegs::_internal_set_v06(uint32_t value) {
  
  _impl_.v06_ = value;
}
inline void VdpRegs::set_v06(uint32_t value) {
  _internal_set_v06(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V06)
}

// uint32 V07 = 8;
inline void VdpRegs::clear_v07() {
  _impl_.v07_ = 0u;
}
inline uint32_t VdpRegs::_internal_v07() const {
  return _impl_.v07_;
}
inline uint32_t VdpRegs::v07() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V07)
  return _internal_v07();
}
inline void VdpRegs::_internal_set_v07(uint32_t value) {
  
  _impl_.v07_ = value;
}
inline void VdpRegs::set_v07(uint32_t value) {
  _internal_set_v07(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V07)
}

// uint32 V08 = 9;
inline void VdpRegs::clear_v08() {
  _impl_.v08_ = 0u;
}
inline uint32_t VdpRegs::_internal_v08() const {
  return _impl_.v08_;
}
inline uint32_t VdpRegs::v08() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V08)
  return _internal_v08();
}
inline void VdpRegs::_internal_set_v08(uint32_t value) {
  
  _impl_.v08_ = value;
}
inline void VdpRegs::set_v08(uint32_t value) {
  _internal_set_v08(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V08)
}

// uint32 V09 = 10;
inline void VdpRegs::clear_v09() {
  _impl_.v09_ = 0u;
}
inline uint32_t VdpRegs::_internal_v09() const {
  return _impl_.v09_;
}
inline uint32_t VdpRegs::v09() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V09)
  return _internal_v09();
}
inline void VdpRegs::_internal_set_v09(uint32_t value) {
  
  _impl_.v09_ = value;
}
inline void VdpRegs::set_v09(uint32_t value) {
  _internal_set_v09(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V09)
}

// uint32 V0A = 11;
inline void VdpRegs::clear_v0a() {
  _impl_.v0a_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0a() const {
  return _impl_.v0a_;
}
inline uint32_t VdpRegs::v0a() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0A)
  return _internal_v0a();
}
inline void VdpRegs::_internal_set_v0a(uint32_t value) {
  
  _impl_.v0a_ = value;
}
inline void VdpRegs::set_v0a(uint32_t value) {
  _internal_set_v0a(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0A)
}

// uint32 V0B = 12;
inline void VdpRegs::clear_v0b() {
  _impl_.v0b_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0b() const {
  return _impl_.v0b_;
}
inline uint32_t VdpRegs::v0b() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0B)
  return _internal_v0b();
}
inline void VdpRegs::_internal_set_v0b(uint32_t value) {
  
  _impl_.v0b_ = value;
}
inline void VdpRegs::set_v0b(uint32_t value) {
  _internal_set_v0b(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0B)
}

// uint32 V0C = 13;
inline void VdpRegs::clear_v0c() {
  _impl_.v0c_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0c() const {
  return _impl_.v0c_;
}
inline uint32_t VdpRegs::v0c() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0C)
  return _internal_v0c();
}
inline void VdpRegs::_internal_set_v0c(uint32_t value) {
  
  _impl_.v0c_ = value;
}
inline void VdpRegs::set_v0c(uint32_t value) {
  _internal_set_v0c(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0C)
}

// uint32 V0D = 14;
inline void VdpRegs::clear_v0d() {
  _impl_.v0d_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0d() const {
  return _impl_.v0d_;
}
inline uint32_t VdpRegs::v0d() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0D)
  return _internal_v0d();
}
inline void VdpRegs::_internal_set_v0d(uint32_t value) {
  
  _impl_.v0d_ = value;
}
inline void VdpRegs::set_v0d(uint32_t value) {
  _internal_set_v0d(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0D)
}

// uint32 V0E = 15;
inline void VdpRegs::clear_v0e() {
  _impl_.v0e_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0e() const {
  return _impl_.v0e_;
}
inline uint32_t VdpRegs::v0e() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0E)
  return _internal_v0e();
}
inline void VdpRegs::_internal_set_v0e(uint32_t value) {
  
  _impl_.v0e_ = value;
}
inline void VdpRegs::set_v0e(uint32_t value) {
  _internal_set_v0e(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0E)
}

// uint32 V0F = 16;
inline void VdpRegs::clear_v0f() {
  _impl_.v0f_ = 0u;
}
inline uint32_t VdpRegs::_internal_v0f() const {
  return _impl_.v0f_;
}
inline uint32_t VdpRegs::v0f() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V0F)
  return _internal_v0f();
}
inline void VdpRegs::_internal_set_v0f(uint32_t value) {
  
  _impl_.v0f_ = value;
}
inline void VdpRegs::set_v0f(uint32_t value) {
  _internal_set_v0f(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V0F)
}

// uint32 V10 = 17;
inline void VdpRegs::clear_v10() {
  _impl_.v10_ = 0u;
}
inline uint32_t VdpRegs::_internal_v10() const {
  return _impl_.v10_;
}
inline uint32_t VdpRegs::v10() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V10)
  return _internal_v10();
}
inline void VdpRegs::_internal_set_v10(uint32_t value) {
  
  _impl_.v10_ = value;
}
inline void VdpRegs::set_v10(uint32_t value) {
  _internal_set_v10(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V10)
}

// uint32 V11 = 18;
inline void VdpRegs::clear_v11() {
  _impl_.v11_ = 0u;
}
inline uint32_t VdpRegs::_internal_v11() const {
  return _impl_.v11_;
}
inline uint32_t VdpRegs::v11() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V11)
  return _internal_v11();
}
inline void VdpRegs::_internal_set_v11(uint32_t value) {
  
  _impl_.v11_ = value;
}
inline void VdpRegs::set_v11(uint32_t value) {
  _internal_set_v11(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V11)
}

// uint32 V12 = 19;
inline void VdpRegs::clear_v12() {
  _impl_.v12_ = 0u;
}
inline uint32_t VdpRegs::_internal_v12() const {
  return _impl_.v12_;
}
inline uint32_t VdpRegs::v12() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V12)
  return _internal_v12();
}
inline void VdpRegs::_internal_set_v12(uint32_t value) {
  
  _impl_.v12_ = value;
}
inline void VdpRegs::set_v12(uint32_t value) {
  _internal_set_v12(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V12)
}

// uint32 V13 = 20;
inline void VdpRegs::clear_v13() {
  _impl_.v13_ = 0u;
}
inline uint32_t VdpRegs::_internal_v13() const {
  return _impl_.v13_;
}
inline uint32_t VdpRegs::v13() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V13)
  return _internal_v13();
}
inline void VdpRegs::_internal_set_v13(uint32_t value) {
  
  _impl_.v13_ = value;
}
inline void VdpRegs::set_v13(uint32_t value) {
  _internal_set_v13(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V13)
}

// uint32 V14 = 21;
inline void VdpRegs::clear_v14() {
  _impl_.v14_ = 0u;
}
inline uint32_t VdpRegs::_internal_v14() const {
  return _impl_.v14_;
}
inline uint32_t VdpRegs::v14() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V14)
  return _internal_v14();
}
inline void VdpRegs::_internal_set_v14(uint32_t value) {
  
  _impl_.v14_ = value;
}
inline void VdpRegs::set_v14(uint32_t value) {
  _internal_set_v14(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V14)
}

// uint32 V15 = 22;
inline void VdpRegs::clear_v15() {
  _impl_.v15_ = 0u;
}
inline uint32_t VdpRegs::_internal_v15() const {
  return _impl_.v15_;
}
inline uint32_t VdpRegs::v15() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V15)
  return _internal_v15();
}
inline void VdpRegs::_internal_set_v15(uint32_t value) {
  
  _impl_.v15_ = value;
}
inline void VdpRegs::set_v15(uint32_t value) {
  _internal_set_v15(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V15)
}

// uint32 V16 = 23;
inline void VdpRegs::clear_v16() {
  _impl_.v16_ = 0u;
}
inline uint32_t VdpRegs::_internal_v16() const {
  return _impl_.v16_;
}
inline uint32_t VdpRegs::v16() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V16)
  return _internal_v16();
}
inline void VdpRegs::_internal_set_v16(uint32_t value) {
  
  _impl_.v16_ = value;
}
inline void VdpRegs::set_v16(uint32_t value) {
  _internal_set_v16(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V16)
}

// uint32 V17 = 24;
inline void VdpRegs::clear_v17() {
  _impl_.v17_ = 0u;
}
inline uint32_t VdpRegs::_internal_v17() const {
  return _impl_.v17_;
}
inline uint32_t VdpRegs::v17() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegs.V17)
  return _internal_v17();
}
inline void VdpRegs::_internal_set_v17(uint32_t value) {
  
  _impl_.v17_ = value;
}
inline void VdpRegs::set_v17(uint32_t value) {
  _internal_set_v17(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegs.V17)
}

// -------------------------------------------------------------------

// VdpRegValue

// .idadebug.VdpRegsEnum index = 1;
inline void VdpRegValue::clear_index() {
  _impl_.index_ = 0;
}
inline ::idadebug::VdpRegsEnum VdpRegValue::_internal_index() const {
  return static_cast< ::idadebug::VdpRegsEnum >(_impl_.index_);
}
inline ::idadebug::VdpRegsEnum VdpRegValue::index() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegValue.index)
  return _internal_index();
}
inline void VdpRegValue::_internal_set_index(::idadebug::VdpRegsEnum value) {
  
  _impl_.index_ = value;
}
inline void VdpRegValue::set_index(::idadebug::VdpRegsEnum value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegValue.index)
}

// uint32 value = 2;
inline void VdpRegValue::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t VdpRegValue::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t VdpRegValue::value() const {
  // @@protoc_insertion_point(field_get:idadebug.VdpRegValue.value)
  return _internal_value();
}
inline void VdpRegValue::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void VdpRegValue::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idadebug.VdpRegValue.value)
}

// -------------------------------------------------------------------

// DmaInfo

// uint32 len = 1;
inline void DmaInfo::clear_len() {
  _impl_.len_ = 0u;
}
inline uint32_t DmaInfo::_internal_len() const {
  return _impl_.len_;
}
inline uint32_t DmaInfo::len() const {
  // @@protoc_insertion_point(field_get:idadebug.DmaInfo.len)
  return _internal_len();
}
inline void DmaInfo::_internal_set_len(uint32_t value) {
  
  _impl_.len_ = value;
}
inline void DmaInfo::set_len(uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:idadebug.DmaInfo.len)
}

// uint32 src = 2;
inline void DmaInfo::clear_src() {
  _impl_.src_ = 0u;
}
inline uint32_t DmaInfo::_internal_src() const {
  return _impl_.src_;
}
inline uint32_t DmaInfo::src() const {
  // @@protoc_insertion_point(field_get:idadebug.DmaInfo.src)
  return _internal_src();
}
inline void DmaInfo::_internal_set_src(uint32_t value) {
  
  _impl_.src_ = value;
}
inline void DmaInfo::set_src(uint32_t value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:idadebug.DmaInfo.src)
}

// uint32 dst = 3;
inline void DmaInfo::clear_dst() {
  _impl_.dst_ = 0u;
}
inline uint32_t DmaInfo::_internal_dst() const {
  return _impl_.dst_;
}
inline uint32_t DmaInfo::dst() const {
  // @@protoc_insertion_point(field_get:idadebug.DmaInfo.dst)
  return _internal_dst();
}
inline void DmaInfo::_internal_set_dst(uint32_t value) {
  
  _impl_.dst_ = value;
}
inline void DmaInfo::set_dst(uint32_t value) {
  _internal_set_dst(value);
  // @@protoc_insertion_point(field_set:idadebug.DmaInfo.dst)
}

// -------------------------------------------------------------------

// MemoryAS

// uint32 address = 1;
inline void MemoryAS::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t MemoryAS::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t MemoryAS::address() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAS.address)
  return _internal_address();
}
inline void MemoryAS::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void MemoryAS::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAS.address)
}

// uint32 size = 2;
inline void MemoryAS::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t MemoryAS::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t MemoryAS::size() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAS.size)
  return _internal_size();
}
inline void MemoryAS::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void MemoryAS::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAS.size)
}

// -------------------------------------------------------------------

// MemoryAD

// uint32 address = 1;
inline void MemoryAD::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t MemoryAD::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t MemoryAD::address() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAD.address)
  return _internal_address();
}
inline void MemoryAD::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void MemoryAD::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAD.address)
}

// bytes data = 2;
inline void MemoryAD::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MemoryAD::data() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAD.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryAD::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.MemoryAD.data)
}
inline std::string* MemoryAD::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:idadebug.MemoryAD.data)
  return _s;
}
inline const std::string& MemoryAD::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MemoryAD::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryAD::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryAD::release_data() {
  // @@protoc_insertion_point(field_release:idadebug.MemoryAD.data)
  return _impl_.data_.Release();
}
inline void MemoryAD::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.MemoryAD.data)
}

// -------------------------------------------------------------------

// DbgBreakpoint

// .idadebug.BpType type = 1;
inline void DbgBreakpoint::clear_type() {
  _impl_.type_ = 0;
}
inline ::idadebug::BpType DbgBreakpoint::_internal_type() const {
  return static_cast< ::idadebug::BpType >(_impl_.type_);
}
inline ::idadebug::BpType DbgBreakpoint::type() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.type)
  return _internal_type();
}
inline void DbgBreakpoint::_internal_set_type(::idadebug::BpType value) {
  
  _impl_.type_ = value;
}
inline void DbgBreakpoint::set_type(::idadebug::BpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.type)
}

// uint32 bstart = 2;
inline void DbgBreakpoint::clear_bstart() {
  _impl_.bstart_ = 0u;
}
inline uint32_t DbgBreakpoint::_internal_bstart() const {
  return _impl_.bstart_;
}
inline uint32_t DbgBreakpoint::bstart() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.bstart)
  return _internal_bstart();
}
inline void DbgBreakpoint::_internal_set_bstart(uint32_t value) {
  
  _impl_.bstart_ = value;
}
inline void DbgBreakpoint::set_bstart(uint32_t value) {
  _internal_set_bstart(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.bstart)
}

// uint32 bend = 3;
inline void DbgBreakpoint::clear_bend() {
  _impl_.bend_ = 0u;
}
inline uint32_t DbgBreakpoint::_internal_bend() const {
  return _impl_.bend_;
}
inline uint32_t DbgBreakpoint::bend() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.bend)
  return _internal_bend();
}
inline void DbgBreakpoint::_internal_set_bend(uint32_t value) {
  
  _impl_.bend_ = value;
}
inline void DbgBreakpoint::set_bend(uint32_t value) {
  _internal_set_bend(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.bend)
}

// bool enabled = 4;
inline void DbgBreakpoint::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool DbgBreakpoint::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool DbgBreakpoint::enabled() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.enabled)
  return _internal_enabled();
}
inline void DbgBreakpoint::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void DbgBreakpoint::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.enabled)
}

// bool is_vdp = 5;
inline void DbgBreakpoint::clear_is_vdp() {
  _impl_.is_vdp_ = false;
}
inline bool DbgBreakpoint::_internal_is_vdp() const {
  return _impl_.is_vdp_;
}
inline bool DbgBreakpoint::is_vdp() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.is_vdp)
  return _internal_is_vdp();
}
inline void DbgBreakpoint::_internal_set_is_vdp(bool value) {
  
  _impl_.is_vdp_ = value;
}
inline void DbgBreakpoint::set_is_vdp(bool value) {
  _internal_set_is_vdp(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.is_vdp)
}

// bool is_forbid = 6;
inline void DbgBreakpoint::clear_is_forbid() {
  _impl_.is_forbid_ = false;
}
inline bool DbgBreakpoint::_internal_is_forbid() const {
  return _impl_.is_forbid_;
}
inline bool DbgBreakpoint::is_forbid() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.is_forbid)
  return _internal_is_forbid();
}
inline void DbgBreakpoint::_internal_set_is_forbid(bool value) {
  
  _impl_.is_forbid_ = value;
}
inline void DbgBreakpoint::set_is_forbid(bool value) {
  _internal_set_is_forbid(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.is_forbid)
}

// string condition = 7;
inline void DbgBreakpoint::clear_condition() {
  _impl_.condition_.ClearToEmpty();
}
inline const std::string& DbgBreakpoint::condition() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.condition)
  return _internal_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbgBreakpoint::set_condition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.condition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.condition)
}
inline std::string* DbgBreakpoint::mutable_condition() {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:idadebug.DbgBreakpoint.condition)
  return _s;
}
inline const std::string& DbgBreakpoint::_internal_condition() const {
  return _impl_.condition_.Get();
}
inline void DbgBreakpoint::_internal_set_condition(const std::string& value) {
  
  _impl_.condition_.Set(value, GetArenaForAllocation());
}
inline std::string* DbgBreakpoint::_internal_mutable_condition() {
  
  return _impl_.condition_.Mutable(GetArenaForAllocation());
}
inline std::string* DbgBreakpoint::release_condition() {
  // @@protoc_insertion_point(field_release:idadebug.DbgBreakpoint.condition)
  return _impl_.condition_.Release();
}
inline void DbgBreakpoint::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    
  } else {
    
  }
  _impl_.condition_.SetAllocated(condition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.condition_.IsDefault()) {
    _impl_.condition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.DbgBreakpoint.condition)
}

// -------------------------------------------------------------------

// DbgBreakpoints

// repeated .idadebug.DbgBreakpoint list = 1;
inline int DbgBreakpoints::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int DbgBreakpoints::list_size() const {
  return _internal_list_size();
}
inline void DbgBreakpoints::clear_list() {
  _impl_.list_.Clear();
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:idadebug.DbgBreakpoints.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >*
DbgBreakpoints::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:idadebug.DbgBreakpoints.list)
  return &_impl_.list_;
}
inline const ::idadebug::DbgBreakpoint& DbgBreakpoints::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::idadebug::DbgBreakpoint& DbgBreakpoints::list(int index) const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoints.list)
  return _internal_list(index);
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::add_list() {
  ::idadebug::DbgBreakpoint* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:idadebug.DbgBreakpoints.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >&
DbgBreakpoints::list() const {
  // @@protoc_insertion_point(field_list:idadebug.DbgBreakpoints.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// Callstack

// repeated uint32 callstack = 1;
inline int Callstack::_internal_callstack_size() const {
  return _impl_.callstack_.size();
}
inline int Callstack::callstack_size() const {
  return _internal_callstack_size();
}
inline void Callstack::clear_callstack() {
  _impl_.callstack_.Clear();
}
inline uint32_t Callstack::_internal_callstack(int index) const {
  return _impl_.callstack_.Get(index);
}
inline uint32_t Callstack::callstack(int index) const {
  // @@protoc_insertion_point(field_get:idadebug.Callstack.callstack)
  return _internal_callstack(index);
}
inline void Callstack::set_callstack(int index, uint32_t value) {
  _impl_.callstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:idadebug.Callstack.callstack)
}
inline void Callstack::_internal_add_callstack(uint32_t value) {
  _impl_.callstack_.Add(value);
}
inline void Callstack::add_callstack(uint32_t value) {
  _internal_add_callstack(value);
  // @@protoc_insertion_point(field_add:idadebug.Callstack.callstack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Callstack::_internal_callstack() const {
  return _impl_.callstack_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Callstack::callstack() const {
  // @@protoc_insertion_point(field_list:idadebug.Callstack.callstack)
  return _internal_callstack();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Callstack::_internal_mutable_callstack() {
  return &_impl_.callstack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Callstack::mutable_callstack() {
  // @@protoc_insertion_point(field_mutable_list:idadebug.Callstack.callstack)
  return _internal_mutable_callstack();
}

// -------------------------------------------------------------------

// AnyRegValue

// uint32 value = 1;
inline void AnyRegValue::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t AnyRegValue::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t AnyRegValue::value() const {
  // @@protoc_insertion_point(field_get:idadebug.AnyRegValue.value)
  return _internal_value();
}
inline void AnyRegValue::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void AnyRegValue::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idadebug.AnyRegValue.value)
}

// -------------------------------------------------------------------

// MemData

// bytes data = 1;
inline void MemData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MemData::data() const {
  // @@protoc_insertion_point(field_get:idadebug.MemData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.MemData.data)
}
inline std::string* MemData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:idadebug.MemData.data)
  return _s;
}
inline const std::string& MemData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MemData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MemData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MemData::release_data() {
  // @@protoc_insertion_point(field_release:idadebug.MemData.data)
  return _impl_.data_.Release();
}
inline void MemData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.MemData.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PauseChanged

// uint32 address = 1;
inline void PauseChanged::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t PauseChanged::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t PauseChanged::address() const {
  // @@protoc_insertion_point(field_get:idadebug.PauseChanged.address)
  return _internal_address();
}
inline void PauseChanged::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void PauseChanged::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.PauseChanged.address)
}

// map<uint32, uint32> changed = 2;
inline int PauseChanged::_internal_changed_size() const {
  return _impl_.changed_.size();
}
inline int PauseChanged::changed_size() const {
  return _internal_changed_size();
}
inline void PauseChanged::clear_changed() {
  _impl_.changed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PauseChanged::_internal_changed() const {
  return _impl_.changed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PauseChanged::changed() const {
  // @@protoc_insertion_point(field_map:idadebug.PauseChanged.changed)
  return _internal_changed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PauseChanged::_internal_mutable_changed() {
  return _impl_.changed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PauseChanged::mutable_changed() {
  // @@protoc_insertion_point(field_mutable_map:idadebug.PauseChanged.changed)
  return _internal_mutable_changed();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Changed

// map<uint32, uint32> changed = 1;
inline int Changed::_internal_changed_size() const {
  return _impl_.changed_.size();
}
inline int Changed::changed_size() const {
  return _internal_changed_size();
}
inline void Changed::clear_changed() {
  _impl_.changed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Changed::_internal_changed() const {
  return _impl_.changed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Changed::changed() const {
  // @@protoc_insertion_point(field_map:idadebug.Changed.changed)
  return _internal_changed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Changed::_internal_mutable_changed() {
  return _impl_.changed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Changed::mutable_changed() {
  // @@protoc_insertion_point(field_mutable_map:idadebug.Changed.changed)
  return _internal_mutable_changed();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idadebug

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idadebug::GpRegsEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idadebug::GpRegsEnum>() {
  return ::idadebug::GpRegsEnum_descriptor();
}
template <> struct is_proto_enum< ::idadebug::VdpRegsEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idadebug::VdpRegsEnum>() {
  return ::idadebug::VdpRegsEnum_descriptor();
}
template <> struct is_proto_enum< ::idadebug::BpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idadebug::BpType>() {
  return ::idadebug::BpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5f68k_2eproto
