// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_z80.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5fz80_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5fz80_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_debug_5fproto_5fz80_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_debug_5fproto_5fz80_2eproto {
  static const uint32_t offsets[];
};
namespace idadebug {
class AnyRegValue;
struct AnyRegValueDefaultTypeInternal;
extern AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
class Callstack;
struct CallstackDefaultTypeInternal;
extern CallstackDefaultTypeInternal _Callstack_default_instance_;
class Changed;
struct ChangedDefaultTypeInternal;
extern ChangedDefaultTypeInternal _Changed_default_instance_;
class Changed_ChangedEntry_DoNotUse;
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal;
extern Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
class Condition;
struct ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class DbgBreakpoint;
struct DbgBreakpointDefaultTypeInternal;
extern DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
class DbgBreakpoints;
struct DbgBreakpointsDefaultTypeInternal;
extern DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
class GpReg;
struct GpRegDefaultTypeInternal;
extern GpRegDefaultTypeInternal _GpReg_default_instance_;
class GpRegValue;
struct GpRegValueDefaultTypeInternal;
extern GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
class GpRegs;
struct GpRegsDefaultTypeInternal;
extern GpRegsDefaultTypeInternal _GpRegs_default_instance_;
class MemData;
struct MemDataDefaultTypeInternal;
extern MemDataDefaultTypeInternal _MemData_default_instance_;
class MemoryAD;
struct MemoryADDefaultTypeInternal;
extern MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
class MemoryAS;
struct MemoryASDefaultTypeInternal;
extern MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
class PauseChanged;
struct PauseChangedDefaultTypeInternal;
extern PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
class PauseChanged_ChangedEntry_DoNotUse;
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal;
extern PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
class SoundBankMap;
struct SoundBankMapDefaultTypeInternal;
extern SoundBankMapDefaultTypeInternal _SoundBankMap_default_instance_;
class SoundBankMap_RangeEntry_DoNotUse;
struct SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal;
extern SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal _SoundBankMap_RangeEntry_DoNotUse_default_instance_;
class SoundBankRange;
struct SoundBankRangeDefaultTypeInternal;
extern SoundBankRangeDefaultTypeInternal _SoundBankRange_default_instance_;
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> ::idadebug::AnyRegValue* Arena::CreateMaybeMessage<::idadebug::AnyRegValue>(Arena*);
template<> ::idadebug::Callstack* Arena::CreateMaybeMessage<::idadebug::Callstack>(Arena*);
template<> ::idadebug::Changed* Arena::CreateMaybeMessage<::idadebug::Changed>(Arena*);
template<> ::idadebug::Changed_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage<::idadebug::Changed_ChangedEntry_DoNotUse>(Arena*);
template<> ::idadebug::Condition* Arena::CreateMaybeMessage<::idadebug::Condition>(Arena*);
template<> ::idadebug::DbgBreakpoint* Arena::CreateMaybeMessage<::idadebug::DbgBreakpoint>(Arena*);
template<> ::idadebug::DbgBreakpoints* Arena::CreateMaybeMessage<::idadebug::DbgBreakpoints>(Arena*);
template<> ::idadebug::GpReg* Arena::CreateMaybeMessage<::idadebug::GpReg>(Arena*);
template<> ::idadebug::GpRegValue* Arena::CreateMaybeMessage<::idadebug::GpRegValue>(Arena*);
template<> ::idadebug::GpRegs* Arena::CreateMaybeMessage<::idadebug::GpRegs>(Arena*);
template<> ::idadebug::MemData* Arena::CreateMaybeMessage<::idadebug::MemData>(Arena*);
template<> ::idadebug::MemoryAD* Arena::CreateMaybeMessage<::idadebug::MemoryAD>(Arena*);
template<> ::idadebug::MemoryAS* Arena::CreateMaybeMessage<::idadebug::MemoryAS>(Arena*);
template<> ::idadebug::PauseChanged* Arena::CreateMaybeMessage<::idadebug::PauseChanged>(Arena*);
template<> ::idadebug::PauseChanged_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage<::idadebug::PauseChanged_ChangedEntry_DoNotUse>(Arena*);
template<> ::idadebug::SoundBankMap* Arena::CreateMaybeMessage<::idadebug::SoundBankMap>(Arena*);
template<> ::idadebug::SoundBankMap_RangeEntry_DoNotUse* Arena::CreateMaybeMessage<::idadebug::SoundBankMap_RangeEntry_DoNotUse>(Arena*);
template<> ::idadebug::SoundBankRange* Arena::CreateMaybeMessage<::idadebug::SoundBankRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idadebug {

enum GpRegsEnum : int {
  AF = 0,
  BC = 1,
  DE = 2,
  HL = 3,
  IX = 4,
  IY = 5,
  A = 6,
  B = 7,
  C = 8,
  D = 9,
  E = 10,
  H = 11,
  L = 12,
  IXH = 13,
  IXL = 14,
  IYH = 15,
  IYL = 16,
  AF2 = 17,
  BC2 = 18,
  DE2 = 19,
  HL2 = 20,
  I = 21,
  R = 22,
  SP = 23,
  IP = 24,
  BANK = 25,
  GpRegsEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GpRegsEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GpRegsEnum_IsValid(int value);
constexpr GpRegsEnum GpRegsEnum_MIN = AF;
constexpr GpRegsEnum GpRegsEnum_MAX = BANK;
constexpr int GpRegsEnum_ARRAYSIZE = GpRegsEnum_MAX + 1;

const std::string& GpRegsEnum_Name(GpRegsEnum value);
template<typename T>
inline const std::string& GpRegsEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpRegsEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpRegsEnum_Name.");
  return GpRegsEnum_Name(static_cast<GpRegsEnum>(enum_t_value));
}
bool GpRegsEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpRegsEnum* value);
enum BpType : int {
  DUMMY = 0,
  BP_PC = 1,
  BP_READ = 2,
  BP_WRITE = 3,
  BpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BpType_IsValid(int value);
constexpr BpType BpType_MIN = DUMMY;
constexpr BpType BpType_MAX = BP_WRITE;
constexpr int BpType_ARRAYSIZE = BpType_MAX + 1;

const std::string& BpType_Name(BpType value);
template<typename T>
inline const std::string& BpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BpType_Name.");
  return BpType_Name(static_cast<BpType>(enum_t_value));
}
bool BpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BpType* value);
// ===================================================================

class GpReg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.GpReg) */ {
 public:
  inline GpReg() : GpReg(nullptr) {}
  ~GpReg() override;
  explicit PROTOBUF_CONSTEXPR GpReg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpReg(const GpReg& from);
  GpReg(GpReg&& from) noexcept
    : GpReg() {
    *this = ::std::move(from);
  }

  inline GpReg& operator=(const GpReg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpReg& operator=(GpReg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GpReg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpReg* internal_default_instance() {
    return reinterpret_cast<const GpReg*>(
               &_GpReg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpReg& a, GpReg& b) {
    a.Swap(&b);
  }
  inline void Swap(GpReg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpReg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpReg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpReg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GpReg& from);
  void MergeFrom(const GpReg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpReg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpReg";
  }
  protected:
  explicit GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegFieldNumber = 1,
  };
  // .idadebug.GpRegsEnum reg = 1;
  void clear_reg();
  ::idadebug::GpRegsEnum reg() const;
  void set_reg(::idadebug::GpRegsEnum value);
  private:
  ::idadebug::GpRegsEnum _internal_reg() const;
  void _internal_set_reg(::idadebug::GpRegsEnum value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpReg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int reg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class GpRegs final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.GpRegs) */ {
 public:
  inline GpRegs() : GpRegs(nullptr) {}
  ~GpRegs() override;
  explicit PROTOBUF_CONSTEXPR GpRegs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpRegs(const GpRegs& from);
  GpRegs(GpRegs&& from) noexcept
    : GpRegs() {
    *this = ::std::move(from);
  }

  inline GpRegs& operator=(const GpRegs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpRegs& operator=(GpRegs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GpRegs& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpRegs* internal_default_instance() {
    return reinterpret_cast<const GpRegs*>(
               &_GpRegs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpRegs& a, GpRegs& b) {
    a.Swap(&b);
  }
  inline void Swap(GpRegs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpRegs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpRegs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpRegs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GpRegs& from);
  void MergeFrom(const GpRegs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpRegs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpRegs";
  }
  protected:
  explicit GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFFieldNumber = 1,
    kBCFieldNumber = 2,
    kDEFieldNumber = 3,
    kHLFieldNumber = 4,
    kIXFieldNumber = 5,
    kIYFieldNumber = 6,
    kAFieldNumber = 7,
    kBFieldNumber = 8,
    kCFieldNumber = 9,
    kDFieldNumber = 10,
    kEFieldNumber = 11,
    kHFieldNumber = 12,
    kLFieldNumber = 13,
    kIXHFieldNumber = 14,
    kIXLFieldNumber = 15,
    kIYHFieldNumber = 16,
    kIYLFieldNumber = 17,
    kAF2FieldNumber = 18,
    kBC2FieldNumber = 19,
    kDE2FieldNumber = 20,
    kHL2FieldNumber = 21,
    kIFieldNumber = 22,
    kRFieldNumber = 23,
    kSPFieldNumber = 24,
    kIPFieldNumber = 25,
    kBANKFieldNumber = 26,
  };
  // uint32 AF = 1;
  void clear_af();
  uint32_t af() const;
  void set_af(uint32_t value);
  private:
  uint32_t _internal_af() const;
  void _internal_set_af(uint32_t value);
  public:

  // uint32 BC = 2;
  void clear_bc();
  uint32_t bc() const;
  void set_bc(uint32_t value);
  private:
  uint32_t _internal_bc() const;
  void _internal_set_bc(uint32_t value);
  public:

  // uint32 DE = 3;
  void clear_de();
  uint32_t de() const;
  void set_de(uint32_t value);
  private:
  uint32_t _internal_de() const;
  void _internal_set_de(uint32_t value);
  public:

  // uint32 HL = 4;
  void clear_hl();
  uint32_t hl() const;
  void set_hl(uint32_t value);
  private:
  uint32_t _internal_hl() const;
  void _internal_set_hl(uint32_t value);
  public:

  // uint32 IX = 5;
  void clear_ix();
  uint32_t ix() const;
  void set_ix(uint32_t value);
  private:
  uint32_t _internal_ix() const;
  void _internal_set_ix(uint32_t value);
  public:

  // uint32 IY = 6;
  void clear_iy();
  uint32_t iy() const;
  void set_iy(uint32_t value);
  private:
  uint32_t _internal_iy() const;
  void _internal_set_iy(uint32_t value);
  public:

  // uint32 A = 7;
  void clear_a();
  uint32_t a() const;
  void set_a(uint32_t value);
  private:
  uint32_t _internal_a() const;
  void _internal_set_a(uint32_t value);
  public:

  // uint32 B = 8;
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // uint32 C = 9;
  void clear_c();
  uint32_t c() const;
  void set_c(uint32_t value);
  private:
  uint32_t _internal_c() const;
  void _internal_set_c(uint32_t value);
  public:

  // uint32 D = 10;
  void clear_d();
  uint32_t d() const;
  void set_d(uint32_t value);
  private:
  uint32_t _internal_d() const;
  void _internal_set_d(uint32_t value);
  public:

  // uint32 E = 11;
  void clear_e();
  uint32_t e() const;
  void set_e(uint32_t value);
  private:
  uint32_t _internal_e() const;
  void _internal_set_e(uint32_t value);
  public:

  // uint32 H = 12;
  void clear_h();
  uint32_t h() const;
  void set_h(uint32_t value);
  private:
  uint32_t _internal_h() const;
  void _internal_set_h(uint32_t value);
  public:

  // uint32 L = 13;
  void clear_l();
  uint32_t l() const;
  void set_l(uint32_t value);
  private:
  uint32_t _internal_l() const;
  void _internal_set_l(uint32_t value);
  public:

  // uint32 IXH = 14;
  void clear_ixh();
  uint32_t ixh() const;
  void set_ixh(uint32_t value);
  private:
  uint32_t _internal_ixh() const;
  void _internal_set_ixh(uint32_t value);
  public:

  // uint32 IXL = 15;
  void clear_ixl();
  uint32_t ixl() const;
  void set_ixl(uint32_t value);
  private:
  uint32_t _internal_ixl() const;
  void _internal_set_ixl(uint32_t value);
  public:

  // uint32 IYH = 16;
  void clear_iyh();
  uint32_t iyh() const;
  void set_iyh(uint32_t value);
  private:
  uint32_t _internal_iyh() const;
  void _internal_set_iyh(uint32_t value);
  public:

  // uint32 IYL = 17;
  void clear_iyl();
  uint32_t iyl() const;
  void set_iyl(uint32_t value);
  private:
  uint32_t _internal_iyl() const;
  void _internal_set_iyl(uint32_t value);
  public:

  // uint32 AF2 = 18;
  void clear_af2();
  uint32_t af2() const;
  void set_af2(uint32_t value);
  private:
  uint32_t _internal_af2() const;
  void _internal_set_af2(uint32_t value);
  public:

  // uint32 BC2 = 19;
  void clear_bc2();
  uint32_t bc2() const;
  void set_bc2(uint32_t value);
  private:
  uint32_t _internal_bc2() const;
  void _internal_set_bc2(uint32_t value);
  public:

  // uint32 DE2 = 20;
  void clear_de2();
  uint32_t de2() const;
  void set_de2(uint32_t value);
  private:
  uint32_t _internal_de2() const;
  void _internal_set_de2(uint32_t value);
  public:

  // uint32 HL2 = 21;
  void clear_hl2();
  uint32_t hl2() const;
  void set_hl2(uint32_t value);
  private:
  uint32_t _internal_hl2() const;
  void _internal_set_hl2(uint32_t value);
  public:

  // uint32 I = 22;
  void clear_i();
  uint32_t i() const;
  void set_i(uint32_t value);
  private:
  uint32_t _internal_i() const;
  void _internal_set_i(uint32_t value);
  public:

  // uint32 R = 23;
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 SP = 24;
  void clear_sp();
  uint32_t sp() const;
  void set_sp(uint32_t value);
  private:
  uint32_t _internal_sp() const;
  void _internal_set_sp(uint32_t value);
  public:

  // uint32 IP = 25;
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // uint32 BANK = 26;
  void clear_bank();
  uint32_t bank() const;
  void set_bank(uint32_t value);
  private:
  uint32_t _internal_bank() const;
  void _internal_set_bank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpRegs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t af_;
    uint32_t bc_;
    uint32_t de_;
    uint32_t hl_;
    uint32_t ix_;
    uint32_t iy_;
    uint32_t a_;
    uint32_t b_;
    uint32_t c_;
    uint32_t d_;
    uint32_t e_;
    uint32_t h_;
    uint32_t l_;
    uint32_t ixh_;
    uint32_t ixl_;
    uint32_t iyh_;
    uint32_t iyl_;
    uint32_t af2_;
    uint32_t bc2_;
    uint32_t de2_;
    uint32_t hl2_;
    uint32_t i_;
    uint32_t r_;
    uint32_t sp_;
    uint32_t ip_;
    uint32_t bank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class GpRegValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.GpRegValue) */ {
 public:
  inline GpRegValue() : GpRegValue(nullptr) {}
  ~GpRegValue() override;
  explicit PROTOBUF_CONSTEXPR GpRegValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpRegValue(const GpRegValue& from);
  GpRegValue(GpRegValue&& from) noexcept
    : GpRegValue() {
    *this = ::std::move(from);
  }

  inline GpRegValue& operator=(const GpRegValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpRegValue& operator=(GpRegValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GpRegValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpRegValue* internal_default_instance() {
    return reinterpret_cast<const GpRegValue*>(
               &_GpRegValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GpRegValue& a, GpRegValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GpRegValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpRegValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpRegValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GpRegValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GpRegValue& from);
  void MergeFrom(const GpRegValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpRegValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.GpRegValue";
  }
  protected:
  explicit GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .idadebug.GpRegsEnum index = 1;
  void clear_index();
  ::idadebug::GpRegsEnum index() const;
  void set_index(::idadebug::GpRegsEnum value);
  private:
  ::idadebug::GpRegsEnum _internal_index() const;
  void _internal_set_index(::idadebug::GpRegsEnum value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.GpRegValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int index_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class MemoryAS final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.MemoryAS) */ {
 public:
  inline MemoryAS() : MemoryAS(nullptr) {}
  ~MemoryAS() override;
  explicit PROTOBUF_CONSTEXPR MemoryAS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAS(const MemoryAS& from);
  MemoryAS(MemoryAS&& from) noexcept
    : MemoryAS() {
    *this = ::std::move(from);
  }

  inline MemoryAS& operator=(const MemoryAS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAS& operator=(MemoryAS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MemoryAS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAS* internal_default_instance() {
    return reinterpret_cast<const MemoryAS*>(
               &_MemoryAS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryAS& a, MemoryAS& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryAS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryAS>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryAS& from);
  void MergeFrom(const MemoryAS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryAS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemoryAS";
  }
  protected:
  explicit MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // uint32 size = 2;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemoryAS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t address_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class MemoryAD final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.MemoryAD) */ {
 public:
  inline MemoryAD() : MemoryAD(nullptr) {}
  ~MemoryAD() override;
  explicit PROTOBUF_CONSTEXPR MemoryAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAD(const MemoryAD& from);
  MemoryAD(MemoryAD&& from) noexcept
    : MemoryAD() {
    *this = ::std::move(from);
  }

  inline MemoryAD& operator=(const MemoryAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAD& operator=(MemoryAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MemoryAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAD* internal_default_instance() {
    return reinterpret_cast<const MemoryAD*>(
               &_MemoryAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemoryAD& a, MemoryAD& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryAD>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemoryAD& from);
  void MergeFrom(const MemoryAD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryAD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemoryAD";
  }
  protected:
  explicit MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemoryAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class DbgBreakpoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.DbgBreakpoint) */ {
 public:
  inline DbgBreakpoint() : DbgBreakpoint(nullptr) {}
  ~DbgBreakpoint() override;
  explicit PROTOBUF_CONSTEXPR DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbgBreakpoint(const DbgBreakpoint& from);
  DbgBreakpoint(DbgBreakpoint&& from) noexcept
    : DbgBreakpoint() {
    *this = ::std::move(from);
  }

  inline DbgBreakpoint& operator=(const DbgBreakpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbgBreakpoint& operator=(DbgBreakpoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DbgBreakpoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbgBreakpoint* internal_default_instance() {
    return reinterpret_cast<const DbgBreakpoint*>(
               &_DbgBreakpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DbgBreakpoint& a, DbgBreakpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DbgBreakpoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbgBreakpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbgBreakpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbgBreakpoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DbgBreakpoint& from);
  void MergeFrom(const DbgBreakpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgBreakpoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.DbgBreakpoint";
  }
  protected:
  explicit DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 6,
    kTypeFieldNumber = 1,
    kBstartFieldNumber = 2,
    kBendFieldNumber = 3,
    kEnabledFieldNumber = 4,
    kElangFieldNumber = 5,
  };
  // string condition = 6;
  void clear_condition();
  const std::string& condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_condition();
  PROTOBUF_NODISCARD std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // .idadebug.BpType type = 1;
  void clear_type();
  ::idadebug::BpType type() const;
  void set_type(::idadebug::BpType value);
  private:
  ::idadebug::BpType _internal_type() const;
  void _internal_set_type(::idadebug::BpType value);
  public:

  // uint32 bstart = 2;
  void clear_bstart();
  uint32_t bstart() const;
  void set_bstart(uint32_t value);
  private:
  uint32_t _internal_bstart() const;
  void _internal_set_bstart(uint32_t value);
  public:

  // uint32 bend = 3;
  void clear_bend();
  uint32_t bend() const;
  void set_bend(uint32_t value);
  private:
  uint32_t _internal_bend() const;
  void _internal_set_bend(uint32_t value);
  public:

  // bool enabled = 4;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 elang = 5;
  void clear_elang();
  uint32_t elang() const;
  void set_elang(uint32_t value);
  private:
  uint32_t _internal_elang() const;
  void _internal_set_elang(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.DbgBreakpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
    int type_;
    uint32_t bstart_;
    uint32_t bend_;
    bool enabled_;
    uint32_t elang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class DbgBreakpoints final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.DbgBreakpoints) */ {
 public:
  inline DbgBreakpoints() : DbgBreakpoints(nullptr) {}
  ~DbgBreakpoints() override;
  explicit PROTOBUF_CONSTEXPR DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbgBreakpoints(const DbgBreakpoints& from);
  DbgBreakpoints(DbgBreakpoints&& from) noexcept
    : DbgBreakpoints() {
    *this = ::std::move(from);
  }

  inline DbgBreakpoints& operator=(const DbgBreakpoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbgBreakpoints& operator=(DbgBreakpoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DbgBreakpoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbgBreakpoints* internal_default_instance() {
    return reinterpret_cast<const DbgBreakpoints*>(
               &_DbgBreakpoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DbgBreakpoints& a, DbgBreakpoints& b) {
    a.Swap(&b);
  }
  inline void Swap(DbgBreakpoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbgBreakpoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbgBreakpoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbgBreakpoints>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DbgBreakpoints& from);
  void MergeFrom(const DbgBreakpoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DbgBreakpoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.DbgBreakpoints";
  }
  protected:
  explicit DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .idadebug.DbgBreakpoint list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::idadebug::DbgBreakpoint* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >*
      mutable_list();
  private:
  const ::idadebug::DbgBreakpoint& _internal_list(int index) const;
  ::idadebug::DbgBreakpoint* _internal_add_list();
  public:
  const ::idadebug::DbgBreakpoint& list(int index) const;
  ::idadebug::DbgBreakpoint* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >&
      list() const;

  // @@protoc_insertion_point(class_scope:idadebug.DbgBreakpoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class Callstack final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.Callstack) */ {
 public:
  inline Callstack() : Callstack(nullptr) {}
  ~Callstack() override;
  explicit PROTOBUF_CONSTEXPR Callstack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Callstack(const Callstack& from);
  Callstack(Callstack&& from) noexcept
    : Callstack() {
    *this = ::std::move(from);
  }

  inline Callstack& operator=(const Callstack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Callstack& operator=(Callstack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Callstack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Callstack* internal_default_instance() {
    return reinterpret_cast<const Callstack*>(
               &_Callstack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Callstack& a, Callstack& b) {
    a.Swap(&b);
  }
  inline void Swap(Callstack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Callstack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Callstack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Callstack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Callstack& from);
  void MergeFrom(const Callstack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Callstack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.Callstack";
  }
  protected:
  explicit Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallstackFieldNumber = 1,
  };
  // repeated uint32 callstack = 1;
  int callstack_size() const;
  private:
  int _internal_callstack_size() const;
  public:
  void clear_callstack();
  private:
  uint32_t _internal_callstack(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_callstack() const;
  void _internal_add_callstack(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_callstack();
  public:
  uint32_t callstack(int index) const;
  void set_callstack(int index, uint32_t value);
  void add_callstack(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      callstack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_callstack();

  // @@protoc_insertion_point(class_scope:idadebug.Callstack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > callstack_;
    mutable std::atomic<int> _callstack_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class AnyRegValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.AnyRegValue) */ {
 public:
  inline AnyRegValue() : AnyRegValue(nullptr) {}
  ~AnyRegValue() override;
  explicit PROTOBUF_CONSTEXPR AnyRegValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnyRegValue(const AnyRegValue& from);
  AnyRegValue(AnyRegValue&& from) noexcept
    : AnyRegValue() {
    *this = ::std::move(from);
  }

  inline AnyRegValue& operator=(const AnyRegValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyRegValue& operator=(AnyRegValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AnyRegValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnyRegValue* internal_default_instance() {
    return reinterpret_cast<const AnyRegValue*>(
               &_AnyRegValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnyRegValue& a, AnyRegValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyRegValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyRegValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnyRegValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnyRegValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AnyRegValue& from);
  void MergeFrom(const AnyRegValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnyRegValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.AnyRegValue";
  }
  protected:
  explicit AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.AnyRegValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class MemData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.MemData) */ {
 public:
  inline MemData() : MemData(nullptr) {}
  ~MemData() override;
  explicit PROTOBUF_CONSTEXPR MemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemData(const MemData& from);
  MemData(MemData&& from) noexcept
    : MemData() {
    *this = ::std::move(from);
  }

  inline MemData& operator=(const MemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemData& operator=(MemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemData* internal_default_instance() {
    return reinterpret_cast<const MemData*>(
               &_MemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MemData& a, MemData& b) {
    a.Swap(&b);
  }
  inline void Swap(MemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MemData& from);
  void MergeFrom(const MemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.MemData";
  }
  protected:
  explicit MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:idadebug.MemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class SoundBankRange final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.SoundBankRange) */ {
 public:
  inline SoundBankRange() : SoundBankRange(nullptr) {}
  ~SoundBankRange() override;
  explicit PROTOBUF_CONSTEXPR SoundBankRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoundBankRange(const SoundBankRange& from);
  SoundBankRange(SoundBankRange&& from) noexcept
    : SoundBankRange() {
    *this = ::std::move(from);
  }

  inline SoundBankRange& operator=(const SoundBankRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundBankRange& operator=(SoundBankRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SoundBankRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoundBankRange* internal_default_instance() {
    return reinterpret_cast<const SoundBankRange*>(
               &_SoundBankRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SoundBankRange& a, SoundBankRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundBankRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundBankRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundBankRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundBankRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SoundBankRange& from);
  void MergeFrom(const SoundBankRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundBankRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.SoundBankRange";
  }
  protected:
  explicit SoundBankRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankMinFieldNumber = 1,
    kBankMaxFieldNumber = 2,
  };
  // uint32 bank_min = 1;
  void clear_bank_min();
  uint32_t bank_min() const;
  void set_bank_min(uint32_t value);
  private:
  uint32_t _internal_bank_min() const;
  void _internal_set_bank_min(uint32_t value);
  public:

  // uint32 bank_max = 2;
  void clear_bank_max();
  uint32_t bank_max() const;
  void set_bank_max(uint32_t value);
  private:
  uint32_t _internal_bank_max() const;
  void _internal_set_bank_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.SoundBankRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t bank_min_;
    uint32_t bank_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class SoundBankMap_RangeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SoundBankMap_RangeEntry_DoNotUse, 
    uint32_t, ::idadebug::SoundBankRange,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SoundBankMap_RangeEntry_DoNotUse, 
    uint32_t, ::idadebug::SoundBankRange,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SoundBankMap_RangeEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SoundBankMap_RangeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SoundBankMap_RangeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SoundBankMap_RangeEntry_DoNotUse& other);
  static const SoundBankMap_RangeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SoundBankMap_RangeEntry_DoNotUse*>(&_SoundBankMap_RangeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};

// -------------------------------------------------------------------

class SoundBankMap final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.SoundBankMap) */ {
 public:
  inline SoundBankMap() : SoundBankMap(nullptr) {}
  ~SoundBankMap() override;
  explicit PROTOBUF_CONSTEXPR SoundBankMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoundBankMap(const SoundBankMap& from);
  SoundBankMap(SoundBankMap&& from) noexcept
    : SoundBankMap() {
    *this = ::std::move(from);
  }

  inline SoundBankMap& operator=(const SoundBankMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundBankMap& operator=(SoundBankMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SoundBankMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoundBankMap* internal_default_instance() {
    return reinterpret_cast<const SoundBankMap*>(
               &_SoundBankMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SoundBankMap& a, SoundBankMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundBankMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundBankMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundBankMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundBankMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SoundBankMap& from);
  void MergeFrom(const SoundBankMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoundBankMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.SoundBankMap";
  }
  protected:
  explicit SoundBankMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // map<uint32, .idadebug.SoundBankRange> range = 1;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >&
      _internal_range() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >*
      _internal_mutable_range();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >&
      range() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >*
      mutable_range();

  // @@protoc_insertion_point(class_scope:idadebug.SoundBankMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        SoundBankMap_RangeEntry_DoNotUse,
        uint32_t, ::idadebug::SoundBankRange,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class PauseChanged_ChangedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<PauseChanged_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<PauseChanged_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  PauseChanged_ChangedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other);
  static const PauseChanged_ChangedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PauseChanged_ChangedEntry_DoNotUse*>(&_PauseChanged_ChangedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};

// -------------------------------------------------------------------

class PauseChanged final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.PauseChanged) */ {
 public:
  inline PauseChanged() : PauseChanged(nullptr) {}
  ~PauseChanged() override;
  explicit PROTOBUF_CONSTEXPR PauseChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PauseChanged(const PauseChanged& from);
  PauseChanged(PauseChanged&& from) noexcept
    : PauseChanged() {
    *this = ::std::move(from);
  }

  inline PauseChanged& operator=(const PauseChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseChanged& operator=(PauseChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PauseChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const PauseChanged* internal_default_instance() {
    return reinterpret_cast<const PauseChanged*>(
               &_PauseChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PauseChanged& a, PauseChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PauseChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PauseChanged>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PauseChanged& from);
  void MergeFrom(const PauseChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PauseChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.PauseChanged";
  }
  protected:
  explicit PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChangedFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // map<uint32, uint32> changed = 2;
  int changed_size() const;
  private:
  int _internal_changed_size() const;
  public:
  void clear_changed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_changed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_changed();

  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.PauseChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        PauseChanged_ChangedEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> changed_;
    uint32_t address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class Changed_ChangedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Changed_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Changed_ChangedEntry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Changed_ChangedEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Changed_ChangedEntry_DoNotUse& other);
  static const Changed_ChangedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Changed_ChangedEntry_DoNotUse*>(&_Changed_ChangedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};

// -------------------------------------------------------------------

class Changed final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.Changed) */ {
 public:
  inline Changed() : Changed(nullptr) {}
  ~Changed() override;
  explicit PROTOBUF_CONSTEXPR Changed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Changed(const Changed& from);
  Changed(Changed&& from) noexcept
    : Changed() {
    *this = ::std::move(from);
  }

  inline Changed& operator=(const Changed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Changed& operator=(Changed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Changed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Changed* internal_default_instance() {
    return reinterpret_cast<const Changed*>(
               &_Changed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Changed& a, Changed& b) {
    a.Swap(&b);
  }
  inline void Swap(Changed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Changed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Changed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Changed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Changed& from);
  void MergeFrom(const Changed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Changed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.Changed";
  }
  protected:
  explicit Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChangedFieldNumber = 1,
  };
  // map<uint32, uint32> changed = 1;
  int changed_size() const;
  private:
  int _internal_changed_size() const;
  public:
  void clear_changed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_changed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      changed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_changed();

  // @@protoc_insertion_point(class_scope:idadebug.Changed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        Changed_ChangedEntry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> changed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// -------------------------------------------------------------------

class Condition final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:idadebug.Condition) */ {
 public:
  inline Condition() : Condition(nullptr) {}
  ~Condition() override;
  explicit PROTOBUF_CONSTEXPR Condition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Condition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Condition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idadebug.Condition";
  }
  protected:
  explicit Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 2,
    kElangFieldNumber = 1,
  };
  // string condition = 2;
  void clear_condition();
  const std::string& condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_condition();
  PROTOBUF_NODISCARD std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // uint32 elang = 1;
  void clear_elang();
  uint32_t elang() const;
  void set_elang(uint32_t value);
  private:
  uint32_t _internal_elang() const;
  void _internal_set_elang(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:idadebug.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
    uint32_t elang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_debug_5fproto_5fz80_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpReg

// .idadebug.GpRegsEnum reg = 1;
inline void GpReg::clear_reg() {
  _impl_.reg_ = 0;
}
inline ::idadebug::GpRegsEnum GpReg::_internal_reg() const {
  return static_cast< ::idadebug::GpRegsEnum >(_impl_.reg_);
}
inline ::idadebug::GpRegsEnum GpReg::reg() const {
  // @@protoc_insertion_point(field_get:idadebug.GpReg.reg)
  return _internal_reg();
}
inline void GpReg::_internal_set_reg(::idadebug::GpRegsEnum value) {
  
  _impl_.reg_ = value;
}
inline void GpReg::set_reg(::idadebug::GpRegsEnum value) {
  _internal_set_reg(value);
  // @@protoc_insertion_point(field_set:idadebug.GpReg.reg)
}

// -------------------------------------------------------------------

// GpRegs

// uint32 AF = 1;
inline void GpRegs::clear_af() {
  _impl_.af_ = 0u;
}
inline uint32_t GpRegs::_internal_af() const {
  return _impl_.af_;
}
inline uint32_t GpRegs::af() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.AF)
  return _internal_af();
}
inline void GpRegs::_internal_set_af(uint32_t value) {
  
  _impl_.af_ = value;
}
inline void GpRegs::set_af(uint32_t value) {
  _internal_set_af(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.AF)
}

// uint32 BC = 2;
inline void GpRegs::clear_bc() {
  _impl_.bc_ = 0u;
}
inline uint32_t GpRegs::_internal_bc() const {
  return _impl_.bc_;
}
inline uint32_t GpRegs::bc() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.BC)
  return _internal_bc();
}
inline void GpRegs::_internal_set_bc(uint32_t value) {
  
  _impl_.bc_ = value;
}
inline void GpRegs::set_bc(uint32_t value) {
  _internal_set_bc(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.BC)
}

// uint32 DE = 3;
inline void GpRegs::clear_de() {
  _impl_.de_ = 0u;
}
inline uint32_t GpRegs::_internal_de() const {
  return _impl_.de_;
}
inline uint32_t GpRegs::de() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.DE)
  return _internal_de();
}
inline void GpRegs::_internal_set_de(uint32_t value) {
  
  _impl_.de_ = value;
}
inline void GpRegs::set_de(uint32_t value) {
  _internal_set_de(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.DE)
}

// uint32 HL = 4;
inline void GpRegs::clear_hl() {
  _impl_.hl_ = 0u;
}
inline uint32_t GpRegs::_internal_hl() const {
  return _impl_.hl_;
}
inline uint32_t GpRegs::hl() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.HL)
  return _internal_hl();
}
inline void GpRegs::_internal_set_hl(uint32_t value) {
  
  _impl_.hl_ = value;
}
inline void GpRegs::set_hl(uint32_t value) {
  _internal_set_hl(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.HL)
}

// uint32 IX = 5;
inline void GpRegs::clear_ix() {
  _impl_.ix_ = 0u;
}
inline uint32_t GpRegs::_internal_ix() const {
  return _impl_.ix_;
}
inline uint32_t GpRegs::ix() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IX)
  return _internal_ix();
}
inline void GpRegs::_internal_set_ix(uint32_t value) {
  
  _impl_.ix_ = value;
}
inline void GpRegs::set_ix(uint32_t value) {
  _internal_set_ix(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IX)
}

// uint32 IY = 6;
inline void GpRegs::clear_iy() {
  _impl_.iy_ = 0u;
}
inline uint32_t GpRegs::_internal_iy() const {
  return _impl_.iy_;
}
inline uint32_t GpRegs::iy() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IY)
  return _internal_iy();
}
inline void GpRegs::_internal_set_iy(uint32_t value) {
  
  _impl_.iy_ = value;
}
inline void GpRegs::set_iy(uint32_t value) {
  _internal_set_iy(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IY)
}

// uint32 A = 7;
inline void GpRegs::clear_a() {
  _impl_.a_ = 0u;
}
inline uint32_t GpRegs::_internal_a() const {
  return _impl_.a_;
}
inline uint32_t GpRegs::a() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.A)
  return _internal_a();
}
inline void GpRegs::_internal_set_a(uint32_t value) {
  
  _impl_.a_ = value;
}
inline void GpRegs::set_a(uint32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.A)
}

// uint32 B = 8;
inline void GpRegs::clear_b() {
  _impl_.b_ = 0u;
}
inline uint32_t GpRegs::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t GpRegs::b() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.B)
  return _internal_b();
}
inline void GpRegs::_internal_set_b(uint32_t value) {
  
  _impl_.b_ = value;
}
inline void GpRegs::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.B)
}

// uint32 C = 9;
inline void GpRegs::clear_c() {
  _impl_.c_ = 0u;
}
inline uint32_t GpRegs::_internal_c() const {
  return _impl_.c_;
}
inline uint32_t GpRegs::c() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.C)
  return _internal_c();
}
inline void GpRegs::_internal_set_c(uint32_t value) {
  
  _impl_.c_ = value;
}
inline void GpRegs::set_c(uint32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.C)
}

// uint32 D = 10;
inline void GpRegs::clear_d() {
  _impl_.d_ = 0u;
}
inline uint32_t GpRegs::_internal_d() const {
  return _impl_.d_;
}
inline uint32_t GpRegs::d() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.D)
  return _internal_d();
}
inline void GpRegs::_internal_set_d(uint32_t value) {
  
  _impl_.d_ = value;
}
inline void GpRegs::set_d(uint32_t value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.D)
}

// uint32 E = 11;
inline void GpRegs::clear_e() {
  _impl_.e_ = 0u;
}
inline uint32_t GpRegs::_internal_e() const {
  return _impl_.e_;
}
inline uint32_t GpRegs::e() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.E)
  return _internal_e();
}
inline void GpRegs::_internal_set_e(uint32_t value) {
  
  _impl_.e_ = value;
}
inline void GpRegs::set_e(uint32_t value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.E)
}

// uint32 H = 12;
inline void GpRegs::clear_h() {
  _impl_.h_ = 0u;
}
inline uint32_t GpRegs::_internal_h() const {
  return _impl_.h_;
}
inline uint32_t GpRegs::h() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.H)
  return _internal_h();
}
inline void GpRegs::_internal_set_h(uint32_t value) {
  
  _impl_.h_ = value;
}
inline void GpRegs::set_h(uint32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.H)
}

// uint32 L = 13;
inline void GpRegs::clear_l() {
  _impl_.l_ = 0u;
}
inline uint32_t GpRegs::_internal_l() const {
  return _impl_.l_;
}
inline uint32_t GpRegs::l() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.L)
  return _internal_l();
}
inline void GpRegs::_internal_set_l(uint32_t value) {
  
  _impl_.l_ = value;
}
inline void GpRegs::set_l(uint32_t value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.L)
}

// uint32 IXH = 14;
inline void GpRegs::clear_ixh() {
  _impl_.ixh_ = 0u;
}
inline uint32_t GpRegs::_internal_ixh() const {
  return _impl_.ixh_;
}
inline uint32_t GpRegs::ixh() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IXH)
  return _internal_ixh();
}
inline void GpRegs::_internal_set_ixh(uint32_t value) {
  
  _impl_.ixh_ = value;
}
inline void GpRegs::set_ixh(uint32_t value) {
  _internal_set_ixh(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IXH)
}

// uint32 IXL = 15;
inline void GpRegs::clear_ixl() {
  _impl_.ixl_ = 0u;
}
inline uint32_t GpRegs::_internal_ixl() const {
  return _impl_.ixl_;
}
inline uint32_t GpRegs::ixl() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IXL)
  return _internal_ixl();
}
inline void GpRegs::_internal_set_ixl(uint32_t value) {
  
  _impl_.ixl_ = value;
}
inline void GpRegs::set_ixl(uint32_t value) {
  _internal_set_ixl(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IXL)
}

// uint32 IYH = 16;
inline void GpRegs::clear_iyh() {
  _impl_.iyh_ = 0u;
}
inline uint32_t GpRegs::_internal_iyh() const {
  return _impl_.iyh_;
}
inline uint32_t GpRegs::iyh() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IYH)
  return _internal_iyh();
}
inline void GpRegs::_internal_set_iyh(uint32_t value) {
  
  _impl_.iyh_ = value;
}
inline void GpRegs::set_iyh(uint32_t value) {
  _internal_set_iyh(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IYH)
}

// uint32 IYL = 17;
inline void GpRegs::clear_iyl() {
  _impl_.iyl_ = 0u;
}
inline uint32_t GpRegs::_internal_iyl() const {
  return _impl_.iyl_;
}
inline uint32_t GpRegs::iyl() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IYL)
  return _internal_iyl();
}
inline void GpRegs::_internal_set_iyl(uint32_t value) {
  
  _impl_.iyl_ = value;
}
inline void GpRegs::set_iyl(uint32_t value) {
  _internal_set_iyl(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IYL)
}

// uint32 AF2 = 18;
inline void GpRegs::clear_af2() {
  _impl_.af2_ = 0u;
}
inline uint32_t GpRegs::_internal_af2() const {
  return _impl_.af2_;
}
inline uint32_t GpRegs::af2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.AF2)
  return _internal_af2();
}
inline void GpRegs::_internal_set_af2(uint32_t value) {
  
  _impl_.af2_ = value;
}
inline void GpRegs::set_af2(uint32_t value) {
  _internal_set_af2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.AF2)
}

// uint32 BC2 = 19;
inline void GpRegs::clear_bc2() {
  _impl_.bc2_ = 0u;
}
inline uint32_t GpRegs::_internal_bc2() const {
  return _impl_.bc2_;
}
inline uint32_t GpRegs::bc2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.BC2)
  return _internal_bc2();
}
inline void GpRegs::_internal_set_bc2(uint32_t value) {
  
  _impl_.bc2_ = value;
}
inline void GpRegs::set_bc2(uint32_t value) {
  _internal_set_bc2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.BC2)
}

// uint32 DE2 = 20;
inline void GpRegs::clear_de2() {
  _impl_.de2_ = 0u;
}
inline uint32_t GpRegs::_internal_de2() const {
  return _impl_.de2_;
}
inline uint32_t GpRegs::de2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.DE2)
  return _internal_de2();
}
inline void GpRegs::_internal_set_de2(uint32_t value) {
  
  _impl_.de2_ = value;
}
inline void GpRegs::set_de2(uint32_t value) {
  _internal_set_de2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.DE2)
}

// uint32 HL2 = 21;
inline void GpRegs::clear_hl2() {
  _impl_.hl2_ = 0u;
}
inline uint32_t GpRegs::_internal_hl2() const {
  return _impl_.hl2_;
}
inline uint32_t GpRegs::hl2() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.HL2)
  return _internal_hl2();
}
inline void GpRegs::_internal_set_hl2(uint32_t value) {
  
  _impl_.hl2_ = value;
}
inline void GpRegs::set_hl2(uint32_t value) {
  _internal_set_hl2(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.HL2)
}

// uint32 I = 22;
inline void GpRegs::clear_i() {
  _impl_.i_ = 0u;
}
inline uint32_t GpRegs::_internal_i() const {
  return _impl_.i_;
}
inline uint32_t GpRegs::i() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.I)
  return _internal_i();
}
inline void GpRegs::_internal_set_i(uint32_t value) {
  
  _impl_.i_ = value;
}
inline void GpRegs::set_i(uint32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.I)
}

// uint32 R = 23;
inline void GpRegs::clear_r() {
  _impl_.r_ = 0u;
}
inline uint32_t GpRegs::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t GpRegs::r() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.R)
  return _internal_r();
}
inline void GpRegs::_internal_set_r(uint32_t value) {
  
  _impl_.r_ = value;
}
inline void GpRegs::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.R)
}

// uint32 SP = 24;
inline void GpRegs::clear_sp() {
  _impl_.sp_ = 0u;
}
inline uint32_t GpRegs::_internal_sp() const {
  return _impl_.sp_;
}
inline uint32_t GpRegs::sp() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.SP)
  return _internal_sp();
}
inline void GpRegs::_internal_set_sp(uint32_t value) {
  
  _impl_.sp_ = value;
}
inline void GpRegs::set_sp(uint32_t value) {
  _internal_set_sp(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.SP)
}

// uint32 IP = 25;
inline void GpRegs::clear_ip() {
  _impl_.ip_ = 0u;
}
inline uint32_t GpRegs::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t GpRegs::ip() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.IP)
  return _internal_ip();
}
inline void GpRegs::_internal_set_ip(uint32_t value) {
  
  _impl_.ip_ = value;
}
inline void GpRegs::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.IP)
}

// uint32 BANK = 26;
inline void GpRegs::clear_bank() {
  _impl_.bank_ = 0u;
}
inline uint32_t GpRegs::_internal_bank() const {
  return _impl_.bank_;
}
inline uint32_t GpRegs::bank() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegs.BANK)
  return _internal_bank();
}
inline void GpRegs::_internal_set_bank(uint32_t value) {
  
  _impl_.bank_ = value;
}
inline void GpRegs::set_bank(uint32_t value) {
  _internal_set_bank(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegs.BANK)
}

// -------------------------------------------------------------------

// GpRegValue

// .idadebug.GpRegsEnum index = 1;
inline void GpRegValue::clear_index() {
  _impl_.index_ = 0;
}
inline ::idadebug::GpRegsEnum GpRegValue::_internal_index() const {
  return static_cast< ::idadebug::GpRegsEnum >(_impl_.index_);
}
inline ::idadebug::GpRegsEnum GpRegValue::index() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegValue.index)
  return _internal_index();
}
inline void GpRegValue::_internal_set_index(::idadebug::GpRegsEnum value) {
  
  _impl_.index_ = value;
}
inline void GpRegValue::set_index(::idadebug::GpRegsEnum value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegValue.index)
}

// uint32 value = 2;
inline void GpRegValue::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t GpRegValue::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t GpRegValue::value() const {
  // @@protoc_insertion_point(field_get:idadebug.GpRegValue.value)
  return _internal_value();
}
inline void GpRegValue::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void GpRegValue::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idadebug.GpRegValue.value)
}

// -------------------------------------------------------------------

// MemoryAS

// uint32 address = 1;
inline void MemoryAS::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t MemoryAS::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t MemoryAS::address() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAS.address)
  return _internal_address();
}
inline void MemoryAS::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void MemoryAS::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAS.address)
}

// uint32 size = 2;
inline void MemoryAS::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t MemoryAS::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t MemoryAS::size() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAS.size)
  return _internal_size();
}
inline void MemoryAS::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void MemoryAS::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAS.size)
}

// -------------------------------------------------------------------

// MemoryAD

// uint32 address = 1;
inline void MemoryAD::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t MemoryAD::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t MemoryAD::address() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAD.address)
  return _internal_address();
}
inline void MemoryAD::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void MemoryAD::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.MemoryAD.address)
}

// bytes data = 2;
inline void MemoryAD::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MemoryAD::data() const {
  // @@protoc_insertion_point(field_get:idadebug.MemoryAD.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryAD::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.MemoryAD.data)
}
inline std::string* MemoryAD::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:idadebug.MemoryAD.data)
  return _s;
}
inline const std::string& MemoryAD::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MemoryAD::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MemoryAD::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MemoryAD::release_data() {
  // @@protoc_insertion_point(field_release:idadebug.MemoryAD.data)
  return _impl_.data_.Release();
}
inline void MemoryAD::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.MemoryAD.data)
}

// -------------------------------------------------------------------

// DbgBreakpoint

// .idadebug.BpType type = 1;
inline void DbgBreakpoint::clear_type() {
  _impl_.type_ = 0;
}
inline ::idadebug::BpType DbgBreakpoint::_internal_type() const {
  return static_cast< ::idadebug::BpType >(_impl_.type_);
}
inline ::idadebug::BpType DbgBreakpoint::type() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.type)
  return _internal_type();
}
inline void DbgBreakpoint::_internal_set_type(::idadebug::BpType value) {
  
  _impl_.type_ = value;
}
inline void DbgBreakpoint::set_type(::idadebug::BpType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.type)
}

// uint32 bstart = 2;
inline void DbgBreakpoint::clear_bstart() {
  _impl_.bstart_ = 0u;
}
inline uint32_t DbgBreakpoint::_internal_bstart() const {
  return _impl_.bstart_;
}
inline uint32_t DbgBreakpoint::bstart() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.bstart)
  return _internal_bstart();
}
inline void DbgBreakpoint::_internal_set_bstart(uint32_t value) {
  
  _impl_.bstart_ = value;
}
inline void DbgBreakpoint::set_bstart(uint32_t value) {
  _internal_set_bstart(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.bstart)
}

// uint32 bend = 3;
inline void DbgBreakpoint::clear_bend() {
  _impl_.bend_ = 0u;
}
inline uint32_t DbgBreakpoint::_internal_bend() const {
  return _impl_.bend_;
}
inline uint32_t DbgBreakpoint::bend() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.bend)
  return _internal_bend();
}
inline void DbgBreakpoint::_internal_set_bend(uint32_t value) {
  
  _impl_.bend_ = value;
}
inline void DbgBreakpoint::set_bend(uint32_t value) {
  _internal_set_bend(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.bend)
}

// bool enabled = 4;
inline void DbgBreakpoint::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool DbgBreakpoint::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool DbgBreakpoint::enabled() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.enabled)
  return _internal_enabled();
}
inline void DbgBreakpoint::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void DbgBreakpoint::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.enabled)
}

// uint32 elang = 5;
inline void DbgBreakpoint::clear_elang() {
  _impl_.elang_ = 0u;
}
inline uint32_t DbgBreakpoint::_internal_elang() const {
  return _impl_.elang_;
}
inline uint32_t DbgBreakpoint::elang() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.elang)
  return _internal_elang();
}
inline void DbgBreakpoint::_internal_set_elang(uint32_t value) {
  
  _impl_.elang_ = value;
}
inline void DbgBreakpoint::set_elang(uint32_t value) {
  _internal_set_elang(value);
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.elang)
}

// string condition = 6;
inline void DbgBreakpoint::clear_condition() {
  _impl_.condition_.ClearToEmpty();
}
inline const std::string& DbgBreakpoint::condition() const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoint.condition)
  return _internal_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbgBreakpoint::set_condition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.condition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.DbgBreakpoint.condition)
}
inline std::string* DbgBreakpoint::mutable_condition() {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:idadebug.DbgBreakpoint.condition)
  return _s;
}
inline const std::string& DbgBreakpoint::_internal_condition() const {
  return _impl_.condition_.Get();
}
inline void DbgBreakpoint::_internal_set_condition(const std::string& value) {
  
  _impl_.condition_.Set(value, GetArenaForAllocation());
}
inline std::string* DbgBreakpoint::_internal_mutable_condition() {
  
  return _impl_.condition_.Mutable(GetArenaForAllocation());
}
inline std::string* DbgBreakpoint::release_condition() {
  // @@protoc_insertion_point(field_release:idadebug.DbgBreakpoint.condition)
  return _impl_.condition_.Release();
}
inline void DbgBreakpoint::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    
  } else {
    
  }
  _impl_.condition_.SetAllocated(condition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.condition_.IsDefault()) {
    _impl_.condition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.DbgBreakpoint.condition)
}

// -------------------------------------------------------------------

// DbgBreakpoints

// repeated .idadebug.DbgBreakpoint list = 1;
inline int DbgBreakpoints::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int DbgBreakpoints::list_size() const {
  return _internal_list_size();
}
inline void DbgBreakpoints::clear_list() {
  _impl_.list_.Clear();
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:idadebug.DbgBreakpoints.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >*
DbgBreakpoints::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:idadebug.DbgBreakpoints.list)
  return &_impl_.list_;
}
inline const ::idadebug::DbgBreakpoint& DbgBreakpoints::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::idadebug::DbgBreakpoint& DbgBreakpoints::list(int index) const {
  // @@protoc_insertion_point(field_get:idadebug.DbgBreakpoints.list)
  return _internal_list(index);
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::idadebug::DbgBreakpoint* DbgBreakpoints::add_list() {
  ::idadebug::DbgBreakpoint* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:idadebug.DbgBreakpoints.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idadebug::DbgBreakpoint >&
DbgBreakpoints::list() const {
  // @@protoc_insertion_point(field_list:idadebug.DbgBreakpoints.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// Callstack

// repeated uint32 callstack = 1;
inline int Callstack::_internal_callstack_size() const {
  return _impl_.callstack_.size();
}
inline int Callstack::callstack_size() const {
  return _internal_callstack_size();
}
inline void Callstack::clear_callstack() {
  _impl_.callstack_.Clear();
}
inline uint32_t Callstack::_internal_callstack(int index) const {
  return _impl_.callstack_.Get(index);
}
inline uint32_t Callstack::callstack(int index) const {
  // @@protoc_insertion_point(field_get:idadebug.Callstack.callstack)
  return _internal_callstack(index);
}
inline void Callstack::set_callstack(int index, uint32_t value) {
  _impl_.callstack_.Set(index, value);
  // @@protoc_insertion_point(field_set:idadebug.Callstack.callstack)
}
inline void Callstack::_internal_add_callstack(uint32_t value) {
  _impl_.callstack_.Add(value);
}
inline void Callstack::add_callstack(uint32_t value) {
  _internal_add_callstack(value);
  // @@protoc_insertion_point(field_add:idadebug.Callstack.callstack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Callstack::_internal_callstack() const {
  return _impl_.callstack_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Callstack::callstack() const {
  // @@protoc_insertion_point(field_list:idadebug.Callstack.callstack)
  return _internal_callstack();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Callstack::_internal_mutable_callstack() {
  return &_impl_.callstack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Callstack::mutable_callstack() {
  // @@protoc_insertion_point(field_mutable_list:idadebug.Callstack.callstack)
  return _internal_mutable_callstack();
}

// -------------------------------------------------------------------

// AnyRegValue

// uint32 value = 1;
inline void AnyRegValue::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t AnyRegValue::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t AnyRegValue::value() const {
  // @@protoc_insertion_point(field_get:idadebug.AnyRegValue.value)
  return _internal_value();
}
inline void AnyRegValue::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void AnyRegValue::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idadebug.AnyRegValue.value)
}

// -------------------------------------------------------------------

// MemData

// bytes data = 1;
inline void MemData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MemData::data() const {
  // @@protoc_insertion_point(field_get:idadebug.MemData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.MemData.data)
}
inline std::string* MemData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:idadebug.MemData.data)
  return _s;
}
inline const std::string& MemData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MemData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MemData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MemData::release_data() {
  // @@protoc_insertion_point(field_release:idadebug.MemData.data)
  return _impl_.data_.Release();
}
inline void MemData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.MemData.data)
}

// -------------------------------------------------------------------

// SoundBankRange

// uint32 bank_min = 1;
inline void SoundBankRange::clear_bank_min() {
  _impl_.bank_min_ = 0u;
}
inline uint32_t SoundBankRange::_internal_bank_min() const {
  return _impl_.bank_min_;
}
inline uint32_t SoundBankRange::bank_min() const {
  // @@protoc_insertion_point(field_get:idadebug.SoundBankRange.bank_min)
  return _internal_bank_min();
}
inline void SoundBankRange::_internal_set_bank_min(uint32_t value) {
  
  _impl_.bank_min_ = value;
}
inline void SoundBankRange::set_bank_min(uint32_t value) {
  _internal_set_bank_min(value);
  // @@protoc_insertion_point(field_set:idadebug.SoundBankRange.bank_min)
}

// uint32 bank_max = 2;
inline void SoundBankRange::clear_bank_max() {
  _impl_.bank_max_ = 0u;
}
inline uint32_t SoundBankRange::_internal_bank_max() const {
  return _impl_.bank_max_;
}
inline uint32_t SoundBankRange::bank_max() const {
  // @@protoc_insertion_point(field_get:idadebug.SoundBankRange.bank_max)
  return _internal_bank_max();
}
inline void SoundBankRange::_internal_set_bank_max(uint32_t value) {
  
  _impl_.bank_max_ = value;
}
inline void SoundBankRange::set_bank_max(uint32_t value) {
  _internal_set_bank_max(value);
  // @@protoc_insertion_point(field_set:idadebug.SoundBankRange.bank_max)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SoundBankMap

// map<uint32, .idadebug.SoundBankRange> range = 1;
inline int SoundBankMap::_internal_range_size() const {
  return _impl_.range_.size();
}
inline int SoundBankMap::range_size() const {
  return _internal_range_size();
}
inline void SoundBankMap::clear_range() {
  _impl_.range_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >&
SoundBankMap::_internal_range() const {
  return _impl_.range_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >&
SoundBankMap::range() const {
  // @@protoc_insertion_point(field_map:idadebug.SoundBankMap.range)
  return _internal_range();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >*
SoundBankMap::_internal_mutable_range() {
  return _impl_.range_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::idadebug::SoundBankRange >*
SoundBankMap::mutable_range() {
  // @@protoc_insertion_point(field_mutable_map:idadebug.SoundBankMap.range)
  return _internal_mutable_range();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PauseChanged

// uint32 address = 1;
inline void PauseChanged::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t PauseChanged::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t PauseChanged::address() const {
  // @@protoc_insertion_point(field_get:idadebug.PauseChanged.address)
  return _internal_address();
}
inline void PauseChanged::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void PauseChanged::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:idadebug.PauseChanged.address)
}

// map<uint32, uint32> changed = 2;
inline int PauseChanged::_internal_changed_size() const {
  return _impl_.changed_.size();
}
inline int PauseChanged::changed_size() const {
  return _internal_changed_size();
}
inline void PauseChanged::clear_changed() {
  _impl_.changed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PauseChanged::_internal_changed() const {
  return _impl_.changed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
PauseChanged::changed() const {
  // @@protoc_insertion_point(field_map:idadebug.PauseChanged.changed)
  return _internal_changed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PauseChanged::_internal_mutable_changed() {
  return _impl_.changed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
PauseChanged::mutable_changed() {
  // @@protoc_insertion_point(field_mutable_map:idadebug.PauseChanged.changed)
  return _internal_mutable_changed();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Changed

// map<uint32, uint32> changed = 1;
inline int Changed::_internal_changed_size() const {
  return _impl_.changed_.size();
}
inline int Changed::changed_size() const {
  return _internal_changed_size();
}
inline void Changed::clear_changed() {
  _impl_.changed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Changed::_internal_changed() const {
  return _impl_.changed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
Changed::changed() const {
  // @@protoc_insertion_point(field_map:idadebug.Changed.changed)
  return _internal_changed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Changed::_internal_mutable_changed() {
  return _impl_.changed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
Changed::mutable_changed() {
  // @@protoc_insertion_point(field_mutable_map:idadebug.Changed.changed)
  return _internal_mutable_changed();
}

// -------------------------------------------------------------------

// Condition

// uint32 elang = 1;
inline void Condition::clear_elang() {
  _impl_.elang_ = 0u;
}
inline uint32_t Condition::_internal_elang() const {
  return _impl_.elang_;
}
inline uint32_t Condition::elang() const {
  // @@protoc_insertion_point(field_get:idadebug.Condition.elang)
  return _internal_elang();
}
inline void Condition::_internal_set_elang(uint32_t value) {
  
  _impl_.elang_ = value;
}
inline void Condition::set_elang(uint32_t value) {
  _internal_set_elang(value);
  // @@protoc_insertion_point(field_set:idadebug.Condition.elang)
}

// string condition = 2;
inline void Condition::clear_condition() {
  _impl_.condition_.ClearToEmpty();
}
inline const std::string& Condition::condition() const {
  // @@protoc_insertion_point(field_get:idadebug.Condition.condition)
  return _internal_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Condition::set_condition(ArgT0&& arg0, ArgT... args) {
 
 _impl_.condition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:idadebug.Condition.condition)
}
inline std::string* Condition::mutable_condition() {
  std::string* _s = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:idadebug.Condition.condition)
  return _s;
}
inline const std::string& Condition::_internal_condition() const {
  return _impl_.condition_.Get();
}
inline void Condition::_internal_set_condition(const std::string& value) {
  
  _impl_.condition_.Set(value, GetArenaForAllocation());
}
inline std::string* Condition::_internal_mutable_condition() {
  
  return _impl_.condition_.Mutable(GetArenaForAllocation());
}
inline std::string* Condition::release_condition() {
  // @@protoc_insertion_point(field_release:idadebug.Condition.condition)
  return _impl_.condition_.Release();
}
inline void Condition::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    
  } else {
    
  }
  _impl_.condition_.SetAllocated(condition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.condition_.IsDefault()) {
    _impl_.condition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:idadebug.Condition.condition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idadebug

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idadebug::GpRegsEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::idadebug::BpType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_debug_5fproto_5fz80_2eproto
