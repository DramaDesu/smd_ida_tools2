// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_68k.proto

#include "debug_proto_68k.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idadebug {
PROTOBUF_CONSTEXPR GpReg::GpReg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegDefaultTypeInternal() {}
  union {
    GpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegDefaultTypeInternal _GpReg_default_instance_;
PROTOBUF_CONSTEXPR GpRegs::GpRegs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.d0_)*/0u
  , /*decltype(_impl_.d1_)*/0u
  , /*decltype(_impl_.d2_)*/0u
  , /*decltype(_impl_.d3_)*/0u
  , /*decltype(_impl_.d4_)*/0u
  , /*decltype(_impl_.d5_)*/0u
  , /*decltype(_impl_.d6_)*/0u
  , /*decltype(_impl_.d7_)*/0u
  , /*decltype(_impl_.a0_)*/0u
  , /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_.a3_)*/0u
  , /*decltype(_impl_.a4_)*/0u
  , /*decltype(_impl_.a5_)*/0u
  , /*decltype(_impl_.a6_)*/0u
  , /*decltype(_impl_.a7_)*/0u
  , /*decltype(_impl_.pc_)*/0u
  , /*decltype(_impl_.sp_)*/0u
  , /*decltype(_impl_.sr_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegsDefaultTypeInternal() {}
  union {
    GpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegsDefaultTypeInternal _GpRegs_default_instance_;
PROTOBUF_CONSTEXPR GpRegValue::GpRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegValueDefaultTypeInternal() {}
  union {
    GpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
PROTOBUF_CONSTEXPR VdpReg::VdpReg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegDefaultTypeInternal() {}
  union {
    VdpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegDefaultTypeInternal _VdpReg_default_instance_;
PROTOBUF_CONSTEXPR VdpRegs::VdpRegs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v00_)*/0u
  , /*decltype(_impl_.v01_)*/0u
  , /*decltype(_impl_.v02_)*/0u
  , /*decltype(_impl_.v03_)*/0u
  , /*decltype(_impl_.v04_)*/0u
  , /*decltype(_impl_.v05_)*/0u
  , /*decltype(_impl_.v06_)*/0u
  , /*decltype(_impl_.v07_)*/0u
  , /*decltype(_impl_.v08_)*/0u
  , /*decltype(_impl_.v09_)*/0u
  , /*decltype(_impl_.v0a_)*/0u
  , /*decltype(_impl_.v0b_)*/0u
  , /*decltype(_impl_.v0c_)*/0u
  , /*decltype(_impl_.v0d_)*/0u
  , /*decltype(_impl_.v0e_)*/0u
  , /*decltype(_impl_.v0f_)*/0u
  , /*decltype(_impl_.v10_)*/0u
  , /*decltype(_impl_.v11_)*/0u
  , /*decltype(_impl_.v12_)*/0u
  , /*decltype(_impl_.v13_)*/0u
  , /*decltype(_impl_.v14_)*/0u
  , /*decltype(_impl_.v15_)*/0u
  , /*decltype(_impl_.v16_)*/0u
  , /*decltype(_impl_.v17_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegsDefaultTypeInternal() {}
  union {
    VdpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegsDefaultTypeInternal _VdpRegs_default_instance_;
PROTOBUF_CONSTEXPR VdpRegValue::VdpRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegValueDefaultTypeInternal() {}
  union {
    VdpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegValueDefaultTypeInternal _VdpRegValue_default_instance_;
PROTOBUF_CONSTEXPR DmaInfo::DmaInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.len_)*/0u
  , /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_.dst_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmaInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmaInfoDefaultTypeInternal() {}
  union {
    DmaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmaInfoDefaultTypeInternal _DmaInfo_default_instance_;
PROTOBUF_CONSTEXPR MemoryAS::MemoryAS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryASDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryASDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryASDefaultTypeInternal() {}
  union {
    MemoryAS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
PROTOBUF_CONSTEXPR MemoryAD::MemoryAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryADDefaultTypeInternal() {}
  union {
    MemoryAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
PROTOBUF_CONSTEXPR DbgBreakpoint::DbgBreakpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.condition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.bstart_)*/0u
  , /*decltype(_impl_.bend_)*/0u
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.is_vdp_)*/false
  , /*decltype(_impl_.elang_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DbgBreakpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointDefaultTypeInternal() {}
  union {
    DbgBreakpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
PROTOBUF_CONSTEXPR DbgBreakpoints::DbgBreakpoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DbgBreakpointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointsDefaultTypeInternal() {}
  union {
    DbgBreakpoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
PROTOBUF_CONSTEXPR Callstack::Callstack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.callstack_)*/{}
  , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallstackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallstackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallstackDefaultTypeInternal _Callstack_default_instance_;
PROTOBUF_CONSTEXPR AnyRegValue::AnyRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnyRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyRegValueDefaultTypeInternal() {}
  union {
    AnyRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
PROTOBUF_CONSTEXPR MemData::MemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemDataDefaultTypeInternal() {}
  union {
    MemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemDataDefaultTypeInternal _MemData_default_instance_;
PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PauseChanged_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PauseChanged::PauseChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changed_)*/{}
  , /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PauseChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseChangedDefaultTypeInternal() {}
  union {
    PauseChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Changed_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Changed_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Changed::Changed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changed_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangedDefaultTypeInternal() {}
  union {
    Changed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangedDefaultTypeInternal _Changed_default_instance_;
PROTOBUF_CONSTEXPR Condition::Condition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.condition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.elang_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionDefaultTypeInternal _Condition_default_instance_;
}  // namespace idadebug
namespace idadebug {
bool GpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 20:
    case 22:
    case 24:
    case 26:
    case 28:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpRegsEnum_strings[19] = {};

static const char GpRegsEnum_names[] =
  "A0"
  "A1"
  "A2"
  "A3"
  "A4"
  "A5"
  "A6"
  "A7"
  "D0"
  "D1"
  "D2"
  "D3"
  "D4"
  "D5"
  "D6"
  "D7"
  "PC"
  "SP"
  "SR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpRegsEnum_entries[] = {
  { {GpRegsEnum_names + 0, 2}, 8 },
  { {GpRegsEnum_names + 2, 2}, 10 },
  { {GpRegsEnum_names + 4, 2}, 12 },
  { {GpRegsEnum_names + 6, 2}, 14 },
  { {GpRegsEnum_names + 8, 2}, 16 },
  { {GpRegsEnum_names + 10, 2}, 18 },
  { {GpRegsEnum_names + 12, 2}, 20 },
  { {GpRegsEnum_names + 14, 2}, 22 },
  { {GpRegsEnum_names + 16, 2}, 0 },
  { {GpRegsEnum_names + 18, 2}, 1 },
  { {GpRegsEnum_names + 20, 2}, 2 },
  { {GpRegsEnum_names + 22, 2}, 3 },
  { {GpRegsEnum_names + 24, 2}, 4 },
  { {GpRegsEnum_names + 26, 2}, 5 },
  { {GpRegsEnum_names + 28, 2}, 6 },
  { {GpRegsEnum_names + 30, 2}, 7 },
  { {GpRegsEnum_names + 32, 2}, 24 },
  { {GpRegsEnum_names + 34, 2}, 26 },
  { {GpRegsEnum_names + 36, 2}, 28 },
};

static const int GpRegsEnum_entries_by_number[] = {
  8, // 0 -> D0
  9, // 1 -> D1
  10, // 2 -> D2
  11, // 3 -> D3
  12, // 4 -> D4
  13, // 5 -> D5
  14, // 6 -> D6
  15, // 7 -> D7
  0, // 8 -> A0
  1, // 10 -> A1
  2, // 12 -> A2
  3, // 14 -> A3
  4, // 16 -> A4
  5, // 18 -> A5
  6, // 20 -> A6
  7, // 22 -> A7
  16, // 24 -> PC
  17, // 26 -> SP
  18, // 28 -> SR
};

const std::string& GpRegsEnum_Name(
    GpRegsEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpRegsEnum_entries,
          GpRegsEnum_entries_by_number,
          19, GpRegsEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpRegsEnum_entries,
      GpRegsEnum_entries_by_number,
      19, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpRegsEnum_strings[idx].get();
}
bool GpRegsEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpRegsEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpRegsEnum_entries, 19, name, &int_value);
  if (success) {
    *value = static_cast<GpRegsEnum>(int_value);
  }
  return success;
}
bool VdpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VdpRegsEnum_strings[24] = {};

static const char VdpRegsEnum_names[] =
  "V00"
  "V01"
  "V02"
  "V03"
  "V04"
  "V05"
  "V06"
  "V07"
  "V08"
  "V09"
  "V0A"
  "V0B"
  "V0C"
  "V0D"
  "V0E"
  "V0F"
  "V10"
  "V11"
  "V12"
  "V13"
  "V14"
  "V15"
  "V16"
  "V17";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VdpRegsEnum_entries[] = {
  { {VdpRegsEnum_names + 0, 3}, 0 },
  { {VdpRegsEnum_names + 3, 3}, 1 },
  { {VdpRegsEnum_names + 6, 3}, 2 },
  { {VdpRegsEnum_names + 9, 3}, 3 },
  { {VdpRegsEnum_names + 12, 3}, 4 },
  { {VdpRegsEnum_names + 15, 3}, 5 },
  { {VdpRegsEnum_names + 18, 3}, 6 },
  { {VdpRegsEnum_names + 21, 3}, 7 },
  { {VdpRegsEnum_names + 24, 3}, 8 },
  { {VdpRegsEnum_names + 27, 3}, 9 },
  { {VdpRegsEnum_names + 30, 3}, 10 },
  { {VdpRegsEnum_names + 33, 3}, 11 },
  { {VdpRegsEnum_names + 36, 3}, 12 },
  { {VdpRegsEnum_names + 39, 3}, 13 },
  { {VdpRegsEnum_names + 42, 3}, 14 },
  { {VdpRegsEnum_names + 45, 3}, 15 },
  { {VdpRegsEnum_names + 48, 3}, 16 },
  { {VdpRegsEnum_names + 51, 3}, 17 },
  { {VdpRegsEnum_names + 54, 3}, 18 },
  { {VdpRegsEnum_names + 57, 3}, 19 },
  { {VdpRegsEnum_names + 60, 3}, 20 },
  { {VdpRegsEnum_names + 63, 3}, 21 },
  { {VdpRegsEnum_names + 66, 3}, 22 },
  { {VdpRegsEnum_names + 69, 3}, 23 },
};

static const int VdpRegsEnum_entries_by_number[] = {
  0, // 0 -> V00
  1, // 1 -> V01
  2, // 2 -> V02
  3, // 3 -> V03
  4, // 4 -> V04
  5, // 5 -> V05
  6, // 6 -> V06
  7, // 7 -> V07
  8, // 8 -> V08
  9, // 9 -> V09
  10, // 10 -> V0A
  11, // 11 -> V0B
  12, // 12 -> V0C
  13, // 13 -> V0D
  14, // 14 -> V0E
  15, // 15 -> V0F
  16, // 16 -> V10
  17, // 17 -> V11
  18, // 18 -> V12
  19, // 19 -> V13
  20, // 20 -> V14
  21, // 21 -> V15
  22, // 22 -> V16
  23, // 23 -> V17
};

const std::string& VdpRegsEnum_Name(
    VdpRegsEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VdpRegsEnum_entries,
          VdpRegsEnum_entries_by_number,
          24, VdpRegsEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VdpRegsEnum_entries,
      VdpRegsEnum_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VdpRegsEnum_strings[idx].get();
}
bool VdpRegsEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VdpRegsEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VdpRegsEnum_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<VdpRegsEnum>(int_value);
  }
  return success;
}
bool BpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BpType_strings[4] = {};

static const char BpType_names[] =
  "BP_PC"
  "BP_READ"
  "BP_WRITE"
  "DUMMY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BpType_entries[] = {
  { {BpType_names + 0, 5}, 1 },
  { {BpType_names + 5, 7}, 2 },
  { {BpType_names + 12, 8}, 3 },
  { {BpType_names + 20, 5}, 0 },
};

static const int BpType_entries_by_number[] = {
  3, // 0 -> DUMMY
  0, // 1 -> BP_PC
  1, // 2 -> BP_READ
  2, // 3 -> BP_WRITE
};

const std::string& BpType_Name(
    BpType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BpType_entries,
          BpType_entries_by_number,
          4, BpType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BpType_entries,
      BpType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BpType_strings[idx].get();
}
bool BpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BpType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BpType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BpType>(int_value);
  }
  return success;
}

// ===================================================================

class GpReg::_Internal {
 public:
};

GpReg::GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpReg)
}
GpReg::GpReg(const GpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpReg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.reg_ = from._impl_.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.GpReg)
}

inline void GpReg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpReg::~GpReg() {
  // @@protoc_insertion_point(destructor:idadebug.GpReg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpReg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GpReg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::GpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpReg)
  return target;
}

size_t GpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpReg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpReg*>(
      &from));
}

void GpReg::MergeFrom(const GpReg& from) {
  GpReg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpReg::CopyFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpReg::IsInitialized() const {
  return true;
}

void GpReg::InternalSwap(GpReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

std::string GpReg::GetTypeName() const {
  return "idadebug.GpReg";
}


// ===================================================================

class GpRegs::_Internal {
 public:
};

GpRegs::GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegs)
}
GpRegs::GpRegs(const GpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpRegs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.d0_){}
    , decltype(_impl_.d1_){}
    , decltype(_impl_.d2_){}
    , decltype(_impl_.d3_){}
    , decltype(_impl_.d4_){}
    , decltype(_impl_.d5_){}
    , decltype(_impl_.d6_){}
    , decltype(_impl_.d7_){}
    , decltype(_impl_.a0_){}
    , decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , decltype(_impl_.a7_){}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.sp_){}
    , decltype(_impl_.sr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.d0_, &from._impl_.d0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sr_) -
    reinterpret_cast<char*>(&_impl_.d0_)) + sizeof(_impl_.sr_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegs)
}

inline void GpRegs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.d0_){0u}
    , decltype(_impl_.d1_){0u}
    , decltype(_impl_.d2_){0u}
    , decltype(_impl_.d3_){0u}
    , decltype(_impl_.d4_){0u}
    , decltype(_impl_.d5_){0u}
    , decltype(_impl_.d6_){0u}
    , decltype(_impl_.d7_){0u}
    , decltype(_impl_.a0_){0u}
    , decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , decltype(_impl_.a3_){0u}
    , decltype(_impl_.a4_){0u}
    , decltype(_impl_.a5_){0u}
    , decltype(_impl_.a6_){0u}
    , decltype(_impl_.a7_){0u}
    , decltype(_impl_.pc_){0u}
    , decltype(_impl_.sp_){0u}
    , decltype(_impl_.sr_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpRegs::~GpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpRegs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.d0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sr_) -
      reinterpret_cast<char*>(&_impl_.d0_)) + sizeof(_impl_.sr_));
  _internal_metadata_.Clear<std::string>();
}

const char* GpRegs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 D0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.d0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.d1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.d2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.d3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.d4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.d5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.d6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.d7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.a0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A6 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.a7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PC = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SP = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SR = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.sr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpRegs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d0(), target);
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_d1(), target);
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_d2(), target);
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_d3(), target);
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_d4(), target);
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_d5(), target);
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_d6(), target);
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_d7(), target);
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_a0(), target);
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_a1(), target);
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_a2(), target);
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_a3(), target);
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_a4(), target);
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_a5(), target);
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_a6(), target);
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_a7(), target);
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pc(), target);
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sp(), target);
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_sr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegs)
  return target;
}

size_t GpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d0());
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d1());
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d2());
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d3());
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d4());
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d5());
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d6());
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d7());
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a0());
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a3());
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a4());
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a5());
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a6());
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_a7());
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pc());
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sp());
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpRegs*>(
      &from));
}

void GpRegs::MergeFrom(const GpRegs& from) {
  GpRegs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_d0() != 0) {
    _this->_internal_set_d0(from._internal_d0());
  }
  if (from._internal_d1() != 0) {
    _this->_internal_set_d1(from._internal_d1());
  }
  if (from._internal_d2() != 0) {
    _this->_internal_set_d2(from._internal_d2());
  }
  if (from._internal_d3() != 0) {
    _this->_internal_set_d3(from._internal_d3());
  }
  if (from._internal_d4() != 0) {
    _this->_internal_set_d4(from._internal_d4());
  }
  if (from._internal_d5() != 0) {
    _this->_internal_set_d5(from._internal_d5());
  }
  if (from._internal_d6() != 0) {
    _this->_internal_set_d6(from._internal_d6());
  }
  if (from._internal_d7() != 0) {
    _this->_internal_set_d7(from._internal_d7());
  }
  if (from._internal_a0() != 0) {
    _this->_internal_set_a0(from._internal_a0());
  }
  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  if (from._internal_a7() != 0) {
    _this->_internal_set_a7(from._internal_a7());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_sr() != 0) {
    _this->_internal_set_sr(from._internal_sr());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpRegs::CopyFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegs::IsInitialized() const {
  return true;
}

void GpRegs::InternalSwap(GpRegs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sr_)
      + sizeof(GpRegs::_impl_.sr_)
      - PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d0_)>(
          reinterpret_cast<char*>(&_impl_.d0_),
          reinterpret_cast<char*>(&other->_impl_.d0_));
}

std::string GpRegs::GetTypeName() const {
  return "idadebug.GpRegs";
}


// ===================================================================

class GpRegValue::_Internal {
 public:
};

GpRegValue::GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegValue)
}
GpRegValue::GpRegValue(const GpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GpRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegValue)
}

inline void GpRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpRegValue::~GpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<std::string>();
}

const char* GpRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::GpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegValue)
  return target;
}

size_t GpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GpRegValue*>(
      &from));
}

void GpRegValue::MergeFrom(const GpRegValue& from) {
  GpRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GpRegValue::CopyFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegValue::IsInitialized() const {
  return true;
}

void GpRegValue::InternalSwap(GpRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.value_)
      + sizeof(GpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

std::string GpRegValue::GetTypeName() const {
  return "idadebug.GpRegValue";
}


// ===================================================================

class VdpReg::_Internal {
 public:
};

VdpReg::VdpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpReg)
}
VdpReg::VdpReg(const VdpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VdpReg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.reg_ = from._impl_.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpReg)
}

inline void VdpReg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpReg::~VdpReg() {
  // @@protoc_insertion_point(destructor:idadebug.VdpReg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpReg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* VdpReg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::VdpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpReg)
  return target;
}

size_t VdpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpReg::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpReg*>(
      &from));
}

void VdpReg::MergeFrom(const VdpReg& from) {
  VdpReg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpReg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpReg::CopyFrom(const VdpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpReg::IsInitialized() const {
  return true;
}

void VdpReg::InternalSwap(VdpReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

std::string VdpReg::GetTypeName() const {
  return "idadebug.VdpReg";
}


// ===================================================================

class VdpRegs::_Internal {
 public:
};

VdpRegs::VdpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegs)
}
VdpRegs::VdpRegs(const VdpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VdpRegs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v00_){}
    , decltype(_impl_.v01_){}
    , decltype(_impl_.v02_){}
    , decltype(_impl_.v03_){}
    , decltype(_impl_.v04_){}
    , decltype(_impl_.v05_){}
    , decltype(_impl_.v06_){}
    , decltype(_impl_.v07_){}
    , decltype(_impl_.v08_){}
    , decltype(_impl_.v09_){}
    , decltype(_impl_.v0a_){}
    , decltype(_impl_.v0b_){}
    , decltype(_impl_.v0c_){}
    , decltype(_impl_.v0d_){}
    , decltype(_impl_.v0e_){}
    , decltype(_impl_.v0f_){}
    , decltype(_impl_.v10_){}
    , decltype(_impl_.v11_){}
    , decltype(_impl_.v12_){}
    , decltype(_impl_.v13_){}
    , decltype(_impl_.v14_){}
    , decltype(_impl_.v15_){}
    , decltype(_impl_.v16_){}
    , decltype(_impl_.v17_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.v00_, &from._impl_.v00_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v17_) -
    reinterpret_cast<char*>(&_impl_.v00_)) + sizeof(_impl_.v17_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegs)
}

inline void VdpRegs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v00_){0u}
    , decltype(_impl_.v01_){0u}
    , decltype(_impl_.v02_){0u}
    , decltype(_impl_.v03_){0u}
    , decltype(_impl_.v04_){0u}
    , decltype(_impl_.v05_){0u}
    , decltype(_impl_.v06_){0u}
    , decltype(_impl_.v07_){0u}
    , decltype(_impl_.v08_){0u}
    , decltype(_impl_.v09_){0u}
    , decltype(_impl_.v0a_){0u}
    , decltype(_impl_.v0b_){0u}
    , decltype(_impl_.v0c_){0u}
    , decltype(_impl_.v0d_){0u}
    , decltype(_impl_.v0e_){0u}
    , decltype(_impl_.v0f_){0u}
    , decltype(_impl_.v10_){0u}
    , decltype(_impl_.v11_){0u}
    , decltype(_impl_.v12_){0u}
    , decltype(_impl_.v13_){0u}
    , decltype(_impl_.v14_){0u}
    , decltype(_impl_.v15_){0u}
    , decltype(_impl_.v16_){0u}
    , decltype(_impl_.v17_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpRegs::~VdpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpRegs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v17_) -
      reinterpret_cast<char*>(&_impl_.v00_)) + sizeof(_impl_.v17_));
  _internal_metadata_.Clear<std::string>();
}

const char* VdpRegs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 V00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v00_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v01_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.v02_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V03 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.v03_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V04 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.v04_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V05 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.v05_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V06 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.v06_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V07 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.v07_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V08 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.v08_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V09 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.v09_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0A = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.v0a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0B = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.v0b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0C = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.v0c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0D = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.v0d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0E = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.v0e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0F = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.v0f_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V10 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.v10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V11 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.v11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V12 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.v12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V13 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.v13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V14 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.v14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V15 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.v15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V16 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.v16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V17 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.v17_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpRegs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_v00(), target);
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v01(), target);
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_v02(), target);
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v03(), target);
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_v04(), target);
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_v05(), target);
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_v06(), target);
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_v07(), target);
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_v08(), target);
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_v09(), target);
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_v0a(), target);
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_v0b(), target);
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_v0c(), target);
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_v0d(), target);
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_v0e(), target);
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_v0f(), target);
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_v10(), target);
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_v11(), target);
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_v12(), target);
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_v13(), target);
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_v14(), target);
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_v15(), target);
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_v16(), target);
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_v17(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegs)
  return target;
}

size_t VdpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v00());
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v01());
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v02());
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v03());
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v04());
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v05());
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v06());
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v07());
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v08());
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v09());
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0a());
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0b());
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0c());
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0d());
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0e());
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v0f());
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v10());
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v11());
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v12());
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v13());
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v14());
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v15());
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v16());
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v17());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpRegs::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpRegs*>(
      &from));
}

void VdpRegs::MergeFrom(const VdpRegs& from) {
  VdpRegs* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v00() != 0) {
    _this->_internal_set_v00(from._internal_v00());
  }
  if (from._internal_v01() != 0) {
    _this->_internal_set_v01(from._internal_v01());
  }
  if (from._internal_v02() != 0) {
    _this->_internal_set_v02(from._internal_v02());
  }
  if (from._internal_v03() != 0) {
    _this->_internal_set_v03(from._internal_v03());
  }
  if (from._internal_v04() != 0) {
    _this->_internal_set_v04(from._internal_v04());
  }
  if (from._internal_v05() != 0) {
    _this->_internal_set_v05(from._internal_v05());
  }
  if (from._internal_v06() != 0) {
    _this->_internal_set_v06(from._internal_v06());
  }
  if (from._internal_v07() != 0) {
    _this->_internal_set_v07(from._internal_v07());
  }
  if (from._internal_v08() != 0) {
    _this->_internal_set_v08(from._internal_v08());
  }
  if (from._internal_v09() != 0) {
    _this->_internal_set_v09(from._internal_v09());
  }
  if (from._internal_v0a() != 0) {
    _this->_internal_set_v0a(from._internal_v0a());
  }
  if (from._internal_v0b() != 0) {
    _this->_internal_set_v0b(from._internal_v0b());
  }
  if (from._internal_v0c() != 0) {
    _this->_internal_set_v0c(from._internal_v0c());
  }
  if (from._internal_v0d() != 0) {
    _this->_internal_set_v0d(from._internal_v0d());
  }
  if (from._internal_v0e() != 0) {
    _this->_internal_set_v0e(from._internal_v0e());
  }
  if (from._internal_v0f() != 0) {
    _this->_internal_set_v0f(from._internal_v0f());
  }
  if (from._internal_v10() != 0) {
    _this->_internal_set_v10(from._internal_v10());
  }
  if (from._internal_v11() != 0) {
    _this->_internal_set_v11(from._internal_v11());
  }
  if (from._internal_v12() != 0) {
    _this->_internal_set_v12(from._internal_v12());
  }
  if (from._internal_v13() != 0) {
    _this->_internal_set_v13(from._internal_v13());
  }
  if (from._internal_v14() != 0) {
    _this->_internal_set_v14(from._internal_v14());
  }
  if (from._internal_v15() != 0) {
    _this->_internal_set_v15(from._internal_v15());
  }
  if (from._internal_v16() != 0) {
    _this->_internal_set_v16(from._internal_v16());
  }
  if (from._internal_v17() != 0) {
    _this->_internal_set_v17(from._internal_v17());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpRegs::CopyFrom(const VdpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegs::IsInitialized() const {
  return true;
}

void VdpRegs::InternalSwap(VdpRegs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v17_)
      + sizeof(VdpRegs::_impl_.v17_)
      - PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v00_)>(
          reinterpret_cast<char*>(&_impl_.v00_),
          reinterpret_cast<char*>(&other->_impl_.v00_));
}

std::string VdpRegs::GetTypeName() const {
  return "idadebug.VdpRegs";
}


// ===================================================================

class VdpRegValue::_Internal {
 public:
};

VdpRegValue::VdpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegValue)
}
VdpRegValue::VdpRegValue(const VdpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VdpRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegValue)
}

inline void VdpRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpRegValue::~VdpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<std::string>();
}

const char* VdpRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::VdpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegValue)
  return target;
}

size_t VdpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpRegValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VdpRegValue*>(
      &from));
}

void VdpRegValue::MergeFrom(const VdpRegValue& from) {
  VdpRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VdpRegValue::CopyFrom(const VdpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegValue::IsInitialized() const {
  return true;
}

void VdpRegValue::InternalSwap(VdpRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.value_)
      + sizeof(VdpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

std::string VdpRegValue::GetTypeName() const {
  return "idadebug.VdpRegValue";
}


// ===================================================================

class DmaInfo::_Internal {
 public:
};

DmaInfo::DmaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DmaInfo)
}
DmaInfo::DmaInfo(const DmaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DmaInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.len_){}
    , decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.len_, &from._impl_.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dst_) -
    reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.dst_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DmaInfo)
}

inline void DmaInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.len_){0u}
    , decltype(_impl_.src_){0u}
    , decltype(_impl_.dst_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmaInfo::~DmaInfo() {
  // @@protoc_insertion_point(destructor:idadebug.DmaInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmaInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DmaInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dst_) -
      reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.dst_));
  _internal_metadata_.Clear<std::string>();
}

const char* DmaInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmaInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DmaInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_len(), target);
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src(), target);
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DmaInfo)
  return target;
}

size_t DmaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DmaInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_len());
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmaInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DmaInfo*>(
      &from));
}

void DmaInfo::MergeFrom(const DmaInfo& from) {
  DmaInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DmaInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_len() != 0) {
    _this->_internal_set_len(from._internal_len());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_dst() != 0) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DmaInfo::CopyFrom(const DmaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DmaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmaInfo::IsInitialized() const {
  return true;
}

void DmaInfo::InternalSwap(DmaInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.dst_)
      + sizeof(DmaInfo::_impl_.dst_)
      - PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.len_)>(
          reinterpret_cast<char*>(&_impl_.len_),
          reinterpret_cast<char*>(&other->_impl_.len_));
}

std::string DmaInfo::GetTypeName() const {
  return "idadebug.DmaInfo";
}


// ===================================================================

class MemoryAS::_Internal {
 public:
};

MemoryAS::MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAS)
}
MemoryAS::MemoryAS(const MemoryAS& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryAS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAS)
}

inline void MemoryAS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemoryAS::~MemoryAS() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryAS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryAS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryAS::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryAS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryAS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAS)
  return target;
}

size_t MemoryAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAS::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryAS*>(
      &from));
}

void MemoryAS::MergeFrom(const MemoryAS& from) {
  MemoryAS* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryAS::CopyFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAS::IsInitialized() const {
  return true;
}

void MemoryAS::InternalSwap(MemoryAS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.size_)
      + sizeof(MemoryAS::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

std::string MemoryAS::GetTypeName() const {
  return "idadebug.MemoryAS";
}


// ===================================================================

class MemoryAD::_Internal {
 public:
};

MemoryAD::MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAD)
}
MemoryAD::MemoryAD(const MemoryAD& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemoryAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAD)
}

inline void MemoryAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.address_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryAD::~MemoryAD() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MemoryAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryAD::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* MemoryAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAD)
  return target;
}

size_t MemoryAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAD::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemoryAD*>(
      &from));
}

void MemoryAD::MergeFrom(const MemoryAD& from) {
  MemoryAD* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemoryAD::CopyFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAD::IsInitialized() const {
  return true;
}

void MemoryAD::InternalSwap(MemoryAD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.address_, other->_impl_.address_);
}

std::string MemoryAD::GetTypeName() const {
  return "idadebug.MemoryAD";
}


// ===================================================================

class DbgBreakpoint::_Internal {
 public:
};

DbgBreakpoint::DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoint)
}
DbgBreakpoint::DbgBreakpoint(const DbgBreakpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DbgBreakpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.bstart_){}
    , decltype(_impl_.bend_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.is_vdp_){}
    , decltype(_impl_.elang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_condition().empty()) {
    _this->_impl_.condition_.Set(from._internal_condition(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elang_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.elang_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoint)
}

inline void DbgBreakpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.bstart_){0u}
    , decltype(_impl_.bend_){0u}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.is_vdp_){false}
    , decltype(_impl_.elang_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DbgBreakpoint::~DbgBreakpoint() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DbgBreakpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.condition_.Destroy();
}

void DbgBreakpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DbgBreakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elang_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.elang_));
  _internal_metadata_.Clear<std::string>();
}

const char* DbgBreakpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.BpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idadebug::BpType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 bstart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_vdp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_vdp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 elang = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.elang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string condition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_condition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DbgBreakpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bstart(), target);
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bend(), target);
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_vdp(), target);
  }

  // uint32 elang = 6;
  if (this->_internal_elang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_elang(), target);
  }

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idadebug.DbgBreakpoint.condition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_condition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoint)
  return target;
}

size_t DbgBreakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_condition());
  }

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bstart());
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bend());
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    total_size += 1 + 1;
  }

  // uint32 elang = 6;
  if (this->_internal_elang() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_elang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DbgBreakpoint*>(
      &from));
}

void DbgBreakpoint::MergeFrom(const DbgBreakpoint& from) {
  DbgBreakpoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_condition().empty()) {
    _this->_internal_set_condition(from._internal_condition());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bstart() != 0) {
    _this->_internal_set_bstart(from._internal_bstart());
  }
  if (from._internal_bend() != 0) {
    _this->_internal_set_bend(from._internal_bend());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_is_vdp() != 0) {
    _this->_internal_set_is_vdp(from._internal_is_vdp());
  }
  if (from._internal_elang() != 0) {
    _this->_internal_set_elang(from._internal_elang());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DbgBreakpoint::CopyFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoint::IsInitialized() const {
  return true;
}

void DbgBreakpoint::InternalSwap(DbgBreakpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.condition_, lhs_arena,
      &other->_impl_.condition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.elang_)
      + sizeof(DbgBreakpoint::_impl_.elang_)
      - PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string DbgBreakpoint::GetTypeName() const {
  return "idadebug.DbgBreakpoint";
}


// ===================================================================

class DbgBreakpoints::_Internal {
 public:
};

DbgBreakpoints::DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoints)
}
DbgBreakpoints::DbgBreakpoints(const DbgBreakpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DbgBreakpoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoints)
}

inline void DbgBreakpoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DbgBreakpoints::~DbgBreakpoints() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DbgBreakpoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void DbgBreakpoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DbgBreakpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DbgBreakpoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idadebug.DbgBreakpoint list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DbgBreakpoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoints)
  return target;
}

size_t DbgBreakpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoints::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DbgBreakpoints*>(
      &from));
}

void DbgBreakpoints::MergeFrom(const DbgBreakpoints& from) {
  DbgBreakpoints* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DbgBreakpoints::CopyFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoints::IsInitialized() const {
  return true;
}

void DbgBreakpoints::InternalSwap(DbgBreakpoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

std::string DbgBreakpoints::GetTypeName() const {
  return "idadebug.DbgBreakpoints";
}


// ===================================================================

class Callstack::_Internal {
 public:
};

Callstack::Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.Callstack)
}
Callstack::Callstack(const Callstack& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Callstack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.callstack_){from._impl_.callstack_}
    , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Callstack)
}

inline void Callstack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.callstack_){arena}
    , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:idadebug.Callstack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Callstack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callstack_.~RepeatedField();
}

void Callstack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Callstack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.callstack_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Callstack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 callstack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_callstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_callstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Callstack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Callstack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    int byte_size = _impl_._callstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_callstack(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Callstack)
  return target;
}

size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Callstack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.callstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._callstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Callstack::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Callstack*>(
      &from));
}

void Callstack::MergeFrom(const Callstack& from) {
  Callstack* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.callstack_.MergeFrom(from._impl_.callstack_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callstack::IsInitialized() const {
  return true;
}

void Callstack::InternalSwap(Callstack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.callstack_.InternalSwap(&other->_impl_.callstack_);
}

std::string Callstack::GetTypeName() const {
  return "idadebug.Callstack";
}


// ===================================================================

class AnyRegValue::_Internal {
 public:
};

AnyRegValue::AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.AnyRegValue)
}
AnyRegValue::AnyRegValue(const AnyRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AnyRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idadebug.AnyRegValue)
}

inline void AnyRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnyRegValue::~AnyRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.AnyRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnyRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.AnyRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* AnyRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnyRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.AnyRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.AnyRegValue)
  return target;
}

size_t AnyRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.AnyRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyRegValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AnyRegValue*>(
      &from));
}

void AnyRegValue::MergeFrom(const AnyRegValue& from) {
  AnyRegValue* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AnyRegValue::CopyFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRegValue::IsInitialized() const {
  return true;
}

void AnyRegValue::InternalSwap(AnyRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

std::string AnyRegValue::GetTypeName() const {
  return "idadebug.AnyRegValue";
}


// ===================================================================

class MemData::_Internal {
 public:
};

MemData::MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemData)
}
MemData::MemData(const MemData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:idadebug.MemData)
}

inline void MemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemData::~MemData() {
  // @@protoc_insertion_point(destructor:idadebug.MemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* MemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemData)
  return target;
}

size_t MemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MemData*>(
      &from));
}

void MemData::MergeFrom(const MemData& from) {
  MemData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MemData::CopyFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemData::IsInitialized() const {
  return true;
}

void MemData::InternalSwap(MemData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

std::string MemData::GetTypeName() const {
  return "idadebug.MemData";
}


// ===================================================================

PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse() {}
PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class PauseChanged::_Internal {
 public:
};

PauseChanged::PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.PauseChanged)
}
PauseChanged::PauseChanged(const PauseChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PauseChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{}
    , decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.PauseChanged)
}

inline void PauseChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.address_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PauseChanged::~PauseChanged() {
  // @@protoc_insertion_point(destructor:idadebug.PauseChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PauseChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changed_.Destruct();
  _impl_.changed_.~MapFieldLite();
}

void PauseChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.PauseChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* PauseChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.PauseChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // map<uint32, uint32> changed = 2;
  if (!this->_internal_changed().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PauseChanged_ChangedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_changed();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.PauseChanged)
  return target;
}

size_t PauseChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.PauseChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += PauseChanged_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseChanged::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PauseChanged*>(
      &from));
}

void PauseChanged::MergeFrom(const PauseChanged& from) {
  PauseChanged* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PauseChanged::CopyFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChanged::IsInitialized() const {
  return true;
}

void PauseChanged::InternalSwap(PauseChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
  swap(_impl_.address_, other->_impl_.address_);
}

std::string PauseChanged::GetTypeName() const {
  return "idadebug.PauseChanged";
}


// ===================================================================

Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse() {}
Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Changed_ChangedEntry_DoNotUse::MergeFrom(const Changed_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class Changed::_Internal {
 public:
};

Changed::Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.Changed)
}
Changed::Changed(const Changed& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Changed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Changed)
}

inline void Changed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Changed::~Changed() {
  // @@protoc_insertion_point(destructor:idadebug.Changed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Changed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changed_.Destruct();
  _impl_.changed_.~MapFieldLite();
}

void Changed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Changed::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Changed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Changed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, uint32> changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Changed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Changed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  if (!this->_internal_changed().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = Changed_ChangedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_changed();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Changed)
  return target;
}

size_t Changed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Changed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += Changed_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Changed::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Changed*>(
      &from));
}

void Changed::MergeFrom(const Changed& from) {
  Changed* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Changed::CopyFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Changed::IsInitialized() const {
  return true;
}

void Changed::InternalSwap(Changed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
}

std::string Changed::GetTypeName() const {
  return "idadebug.Changed";
}


// ===================================================================

class Condition::_Internal {
 public:
};

Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Condition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.elang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_condition().empty()) {
    _this->_impl_.condition_.Set(from._internal_condition(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.elang_ = from._impl_.elang_;
  // @@protoc_insertion_point(copy_constructor:idadebug.Condition)
}

inline void Condition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.elang_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:idadebug.Condition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.condition_.Destroy();
}

void Condition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Condition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.ClearToEmpty();
  _impl_.elang_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* Condition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 elang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.elang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string condition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_condition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Condition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Condition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 elang = 1;
  if (this->_internal_elang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_elang(), target);
  }

  // string condition = 2;
  if (!this->_internal_condition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idadebug.Condition.condition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_condition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Condition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string condition = 2;
  if (!this->_internal_condition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_condition());
  }

  // uint32 elang = 1;
  if (this->_internal_elang() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_elang());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Condition*>(
      &from));
}

void Condition::MergeFrom(const Condition& from) {
  Condition* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Condition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_condition().empty()) {
    _this->_internal_set_condition(from._internal_condition());
  }
  if (from._internal_elang() != 0) {
    _this->_internal_set_elang(from._internal_elang());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.condition_, lhs_arena,
      &other->_impl_.condition_, rhs_arena
  );
  swap(_impl_.elang_, other->_impl_.elang_);
}

std::string Condition::GetTypeName() const {
  return "idadebug.Condition";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idadebug::GpReg*
Arena::CreateMaybeMessage< ::idadebug::GpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegs*
Arena::CreateMaybeMessage< ::idadebug::GpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegValue*
Arena::CreateMaybeMessage< ::idadebug::GpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpReg*
Arena::CreateMaybeMessage< ::idadebug::VdpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegs*
Arena::CreateMaybeMessage< ::idadebug::VdpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegValue*
Arena::CreateMaybeMessage< ::idadebug::VdpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DmaInfo*
Arena::CreateMaybeMessage< ::idadebug::DmaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DmaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAS*
Arena::CreateMaybeMessage< ::idadebug::MemoryAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAS >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAD*
Arena::CreateMaybeMessage< ::idadebug::MemoryAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAD >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoint*
Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoints*
Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Callstack*
Arena::CreateMaybeMessage< ::idadebug::Callstack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Callstack >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::AnyRegValue*
Arena::CreateMaybeMessage< ::idadebug::AnyRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::AnyRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemData*
Arena::CreateMaybeMessage< ::idadebug::MemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged_ChangedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged*
Arena::CreateMaybeMessage< ::idadebug::PauseChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed_ChangedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::idadebug::Changed_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed*
Arena::CreateMaybeMessage< ::idadebug::Changed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Condition*
Arena::CreateMaybeMessage< ::idadebug::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Condition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
