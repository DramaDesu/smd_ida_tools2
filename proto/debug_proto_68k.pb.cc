// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_68k.proto

#include "debug_proto_68k.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace idadebug {
PROTOBUF_CONSTEXPR GpReg::GpReg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegDefaultTypeInternal() {}
  union {
    GpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegDefaultTypeInternal _GpReg_default_instance_;
PROTOBUF_CONSTEXPR GpRegs::GpRegs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.d0_)*/0u
  , /*decltype(_impl_.d1_)*/0u
  , /*decltype(_impl_.d2_)*/0u
  , /*decltype(_impl_.d3_)*/0u
  , /*decltype(_impl_.d4_)*/0u
  , /*decltype(_impl_.d5_)*/0u
  , /*decltype(_impl_.d6_)*/0u
  , /*decltype(_impl_.d7_)*/0u
  , /*decltype(_impl_.a0_)*/0u
  , /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_.a3_)*/0u
  , /*decltype(_impl_.a4_)*/0u
  , /*decltype(_impl_.a5_)*/0u
  , /*decltype(_impl_.a6_)*/0u
  , /*decltype(_impl_.a7_)*/0u
  , /*decltype(_impl_.pc_)*/0u
  , /*decltype(_impl_.sp_)*/0u
  , /*decltype(_impl_.sr_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegsDefaultTypeInternal() {}
  union {
    GpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegsDefaultTypeInternal _GpRegs_default_instance_;
PROTOBUF_CONSTEXPR GpRegValue::GpRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpRegValueDefaultTypeInternal() {}
  union {
    GpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
PROTOBUF_CONSTEXPR VdpReg::VdpReg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegDefaultTypeInternal() {}
  union {
    VdpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegDefaultTypeInternal _VdpReg_default_instance_;
PROTOBUF_CONSTEXPR VdpRegs::VdpRegs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v00_)*/0u
  , /*decltype(_impl_.v01_)*/0u
  , /*decltype(_impl_.v02_)*/0u
  , /*decltype(_impl_.v03_)*/0u
  , /*decltype(_impl_.v04_)*/0u
  , /*decltype(_impl_.v05_)*/0u
  , /*decltype(_impl_.v06_)*/0u
  , /*decltype(_impl_.v07_)*/0u
  , /*decltype(_impl_.v08_)*/0u
  , /*decltype(_impl_.v09_)*/0u
  , /*decltype(_impl_.v0a_)*/0u
  , /*decltype(_impl_.v0b_)*/0u
  , /*decltype(_impl_.v0c_)*/0u
  , /*decltype(_impl_.v0d_)*/0u
  , /*decltype(_impl_.v0e_)*/0u
  , /*decltype(_impl_.v0f_)*/0u
  , /*decltype(_impl_.v10_)*/0u
  , /*decltype(_impl_.v11_)*/0u
  , /*decltype(_impl_.v12_)*/0u
  , /*decltype(_impl_.v13_)*/0u
  , /*decltype(_impl_.v14_)*/0u
  , /*decltype(_impl_.v15_)*/0u
  , /*decltype(_impl_.v16_)*/0u
  , /*decltype(_impl_.v17_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegsDefaultTypeInternal() {}
  union {
    VdpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegsDefaultTypeInternal _VdpRegs_default_instance_;
PROTOBUF_CONSTEXPR VdpRegValue::VdpRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VdpRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VdpRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VdpRegValueDefaultTypeInternal() {}
  union {
    VdpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VdpRegValueDefaultTypeInternal _VdpRegValue_default_instance_;
PROTOBUF_CONSTEXPR DmaInfo::DmaInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.len_)*/0u
  , /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_.dst_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmaInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmaInfoDefaultTypeInternal() {}
  union {
    DmaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmaInfoDefaultTypeInternal _DmaInfo_default_instance_;
PROTOBUF_CONSTEXPR MemoryAS::MemoryAS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryASDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryASDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryASDefaultTypeInternal() {}
  union {
    MemoryAS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
PROTOBUF_CONSTEXPR MemoryAD::MemoryAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryADDefaultTypeInternal() {}
  union {
    MemoryAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
PROTOBUF_CONSTEXPR DbgBreakpoint::DbgBreakpoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.condition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.bstart_)*/0u
  , /*decltype(_impl_.bend_)*/0u
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.is_vdp_)*/false
  , /*decltype(_impl_.is_forbid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DbgBreakpointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointDefaultTypeInternal() {}
  union {
    DbgBreakpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
PROTOBUF_CONSTEXPR DbgBreakpoints::DbgBreakpoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DbgBreakpointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbgBreakpointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbgBreakpointsDefaultTypeInternal() {}
  union {
    DbgBreakpoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
PROTOBUF_CONSTEXPR Callstack::Callstack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.callstack_)*/{}
  , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallstackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallstackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallstackDefaultTypeInternal _Callstack_default_instance_;
PROTOBUF_CONSTEXPR AnyRegValue::AnyRegValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnyRegValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyRegValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyRegValueDefaultTypeInternal() {}
  union {
    AnyRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
PROTOBUF_CONSTEXPR MemData::MemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemDataDefaultTypeInternal() {}
  union {
    MemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemDataDefaultTypeInternal _MemData_default_instance_;
PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PauseChanged_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PauseChanged::PauseChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changed_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PauseChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseChangedDefaultTypeInternal() {}
  union {
    PauseChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Changed_ChangedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Changed_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Changed_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Changed::Changed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.changed_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangedDefaultTypeInternal() {}
  union {
    Changed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangedDefaultTypeInternal _Changed_default_instance_;
}  // namespace idadebug
static ::_pb::Metadata file_level_metadata_debug_5fproto_5f68k_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_debug_5fproto_5f68k_2eproto = nullptr;

const uint32_t TableStruct_debug_5fproto_5f68k_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, _impl_.reg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d0_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d1_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d3_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d4_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d5_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d6_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.d7_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a0_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a6_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.a7_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.sp_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _impl_.sr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpReg, _impl_.reg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v00_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v01_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v02_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v03_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v04_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v05_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v06_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v07_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v08_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v09_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0a_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0b_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0c_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0d_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0e_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v0f_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v10_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v11_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v12_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v13_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v14_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v15_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v16_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _impl_.v17_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, _impl_.len_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, _impl_.dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.bstart_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.bend_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.is_vdp_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.is_forbid_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _impl_.condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, _impl_.callstack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, _impl_.changed_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, _impl_.changed_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::idadebug::GpReg)},
  { 7, -1, -1, sizeof(::idadebug::GpRegs)},
  { 32, -1, -1, sizeof(::idadebug::GpRegValue)},
  { 40, -1, -1, sizeof(::idadebug::VdpReg)},
  { 47, -1, -1, sizeof(::idadebug::VdpRegs)},
  { 77, -1, -1, sizeof(::idadebug::VdpRegValue)},
  { 85, -1, -1, sizeof(::idadebug::DmaInfo)},
  { 94, -1, -1, sizeof(::idadebug::MemoryAS)},
  { 102, -1, -1, sizeof(::idadebug::MemoryAD)},
  { 110, -1, -1, sizeof(::idadebug::DbgBreakpoint)},
  { 123, -1, -1, sizeof(::idadebug::DbgBreakpoints)},
  { 130, -1, -1, sizeof(::idadebug::Callstack)},
  { 137, -1, -1, sizeof(::idadebug::AnyRegValue)},
  { 144, -1, -1, sizeof(::idadebug::MemData)},
  { 151, 159, -1, sizeof(::idadebug::PauseChanged_ChangedEntry_DoNotUse)},
  { 161, -1, -1, sizeof(::idadebug::PauseChanged)},
  { 169, 177, -1, sizeof(::idadebug::Changed_ChangedEntry_DoNotUse)},
  { 179, -1, -1, sizeof(::idadebug::Changed)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::idadebug::_GpReg_default_instance_._instance,
  &::idadebug::_GpRegs_default_instance_._instance,
  &::idadebug::_GpRegValue_default_instance_._instance,
  &::idadebug::_VdpReg_default_instance_._instance,
  &::idadebug::_VdpRegs_default_instance_._instance,
  &::idadebug::_VdpRegValue_default_instance_._instance,
  &::idadebug::_DmaInfo_default_instance_._instance,
  &::idadebug::_MemoryAS_default_instance_._instance,
  &::idadebug::_MemoryAD_default_instance_._instance,
  &::idadebug::_DbgBreakpoint_default_instance_._instance,
  &::idadebug::_DbgBreakpoints_default_instance_._instance,
  &::idadebug::_Callstack_default_instance_._instance,
  &::idadebug::_AnyRegValue_default_instance_._instance,
  &::idadebug::_MemData_default_instance_._instance,
  &::idadebug::_PauseChanged_ChangedEntry_DoNotUse_default_instance_._instance,
  &::idadebug::_PauseChanged_default_instance_._instance,
  &::idadebug::_Changed_ChangedEntry_DoNotUse_default_instance_._instance,
  &::idadebug::_Changed_default_instance_._instance,
};

const char descriptor_table_protodef_debug_5fproto_5f68k_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025debug_proto_68k.proto\022\010idadebug\032\033googl"
  "e/protobuf/empty.proto\"*\n\005GpReg\022!\n\003reg\030\001"
  " \001(\0162\024.idadebug.GpRegsEnum\"\354\001\n\006GpRegs\022\n\n"
  "\002D0\030\001 \001(\r\022\n\n\002D1\030\002 \001(\r\022\n\n\002D2\030\003 \001(\r\022\n\n\002D3\030"
  "\004 \001(\r\022\n\n\002D4\030\005 \001(\r\022\n\n\002D5\030\006 \001(\r\022\n\n\002D6\030\007 \001("
  "\r\022\n\n\002D7\030\010 \001(\r\022\n\n\002A0\030\t \001(\r\022\n\n\002A1\030\n \001(\r\022\n\n"
  "\002A2\030\013 \001(\r\022\n\n\002A3\030\014 \001(\r\022\n\n\002A4\030\r \001(\r\022\n\n\002A5\030"
  "\016 \001(\r\022\n\n\002A6\030\017 \001(\r\022\n\n\002A7\030\020 \001(\r\022\n\n\002PC\030\021 \001("
  "\r\022\n\n\002SP\030\022 \001(\r\022\n\n\002SR\030\023 \001(\r\"@\n\nGpRegValue\022"
  "#\n\005index\030\001 \001(\0162\024.idadebug.GpRegsEnum\022\r\n\005"
  "value\030\002 \001(\r\",\n\006VdpReg\022\"\n\003reg\030\001 \001(\0162\025.ida"
  "debug.VdpRegsEnum\"\301\002\n\007VdpRegs\022\013\n\003V00\030\001 \001"
  "(\r\022\013\n\003V01\030\002 \001(\r\022\013\n\003V02\030\003 \001(\r\022\013\n\003V03\030\004 \001("
  "\r\022\013\n\003V04\030\005 \001(\r\022\013\n\003V05\030\006 \001(\r\022\013\n\003V06\030\007 \001(\r"
  "\022\013\n\003V07\030\010 \001(\r\022\013\n\003V08\030\t \001(\r\022\013\n\003V09\030\n \001(\r\022"
  "\013\n\003V0A\030\013 \001(\r\022\013\n\003V0B\030\014 \001(\r\022\013\n\003V0C\030\r \001(\r\022\013"
  "\n\003V0D\030\016 \001(\r\022\013\n\003V0E\030\017 \001(\r\022\013\n\003V0F\030\020 \001(\r\022\013\n"
  "\003V10\030\021 \001(\r\022\013\n\003V11\030\022 \001(\r\022\013\n\003V12\030\023 \001(\r\022\013\n\003"
  "V13\030\024 \001(\r\022\013\n\003V14\030\025 \001(\r\022\013\n\003V15\030\026 \001(\r\022\013\n\003V"
  "16\030\027 \001(\r\022\013\n\003V17\030\030 \001(\r\"B\n\013VdpRegValue\022$\n\005"
  "index\030\001 \001(\0162\025.idadebug.VdpRegsEnum\022\r\n\005va"
  "lue\030\002 \001(\r\"0\n\007DmaInfo\022\013\n\003len\030\001 \001(\r\022\013\n\003src"
  "\030\002 \001(\r\022\013\n\003dst\030\003 \001(\r\")\n\010MemoryAS\022\017\n\007addre"
  "ss\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\")\n\010MemoryAD\022\017\n\007ad"
  "dress\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"\224\001\n\rDbgBreakpo"
  "int\022\036\n\004type\030\001 \001(\0162\020.idadebug.BpType\022\016\n\006b"
  "start\030\002 \001(\r\022\014\n\004bend\030\003 \001(\r\022\017\n\007enabled\030\004 \001"
  "(\010\022\016\n\006is_vdp\030\005 \001(\010\022\021\n\tis_forbid\030\006 \001(\010\022\021\n"
  "\tcondition\030\007 \001(\t\"7\n\016DbgBreakpoints\022%\n\004li"
  "st\030\001 \003(\0132\027.idadebug.DbgBreakpoint\"\036\n\tCal"
  "lstack\022\021\n\tcallstack\030\001 \003(\r\"\034\n\013AnyRegValue"
  "\022\r\n\005value\030\001 \001(\r\"\027\n\007MemData\022\014\n\004data\030\001 \001(\014"
  "\"\205\001\n\014PauseChanged\022\017\n\007address\030\001 \001(\r\0224\n\007ch"
  "anged\030\002 \003(\0132#.idadebug.PauseChanged.Chan"
  "gedEntry\032.\n\014ChangedEntry\022\013\n\003key\030\001 \001(\r\022\r\n"
  "\005value\030\002 \001(\r:\0028\001\"j\n\007Changed\022/\n\007changed\030\001"
  " \003(\0132\036.idadebug.Changed.ChangedEntry\032.\n\014"
  "ChangedEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r"
  ":\0028\001*\244\001\n\nGpRegsEnum\022\006\n\002D0\020\000\022\006\n\002D1\020\001\022\006\n\002D"
  "2\020\002\022\006\n\002D3\020\003\022\006\n\002D4\020\004\022\006\n\002D5\020\005\022\006\n\002D6\020\006\022\006\n\002D"
  "7\020\007\022\006\n\002A0\020\010\022\006\n\002A1\020\n\022\006\n\002A2\020\014\022\006\n\002A3\020\016\022\006\n\002A"
  "4\020\020\022\006\n\002A5\020\022\022\006\n\002A6\020\024\022\006\n\002A7\020\026\022\006\n\002PC\020\030\022\006\n\002S"
  "P\020\032\022\006\n\002SR\020\034*\345\001\n\013VdpRegsEnum\022\007\n\003V00\020\000\022\007\n\003"
  "V01\020\001\022\007\n\003V02\020\002\022\007\n\003V03\020\003\022\007\n\003V04\020\004\022\007\n\003V05\020"
  "\005\022\007\n\003V06\020\006\022\007\n\003V07\020\007\022\007\n\003V08\020\010\022\007\n\003V09\020\t\022\007\n"
  "\003V0A\020\n\022\007\n\003V0B\020\013\022\007\n\003V0C\020\014\022\007\n\003V0D\020\r\022\007\n\003V0E"
  "\020\016\022\007\n\003V0F\020\017\022\007\n\003V10\020\020\022\007\n\003V11\020\021\022\007\n\003V12\020\022\022\007"
  "\n\003V13\020\023\022\007\n\003V14\020\024\022\007\n\003V15\020\025\022\007\n\003V16\020\026\022\007\n\003V1"
  "7\020\027*9\n\006BpType\022\t\n\005DUMMY\020\000\022\t\n\005BP_PC\020\001\022\013\n\007B"
  "P_READ\020\002\022\014\n\010BP_WRITE\020\0032\214\013\n\tDbgServer\0226\n\n"
  "get_gp_reg\022\017.idadebug.GpReg\032\025.idadebug.A"
  "nyRegValue\"\000\0229\n\013get_gp_regs\022\026.google.pro"
  "tobuf.Empty\032\020.idadebug.GpRegs\"\000\022<\n\nset_g"
  "p_reg\022\024.idadebug.GpRegValue\032\026.google.pro"
  "tobuf.Empty\"\000\0228\n\013get_vdp_reg\022\020.idadebug."
  "VdpReg\032\025.idadebug.AnyRegValue\"\000\022;\n\014get_v"
  "dp_regs\022\026.google.protobuf.Empty\032\021.idadeb"
  "ug.VdpRegs\"\000\022>\n\013set_vdp_reg\022\025.idadebug.V"
  "dpRegValue\032\026.google.protobuf.Empty\"\000\022;\n\014"
  "get_dma_info\022\026.google.protobuf.Empty\032\021.i"
  "dadebug.DmaInfo\"\000\0226\n\013read_memory\022\022.idade"
  "bug.MemoryAS\032\021.idadebug.MemData\"\000\022<\n\014wri"
  "te_memory\022\022.idadebug.MemoryAD\032\026.google.p"
  "rotobuf.Empty\"\000\022E\n\017get_breakpoints\022\026.goo"
  "gle.protobuf.Empty\032\030.idadebug.DbgBreakpo"
  "ints\"\000\022C\n\016add_breakpoint\022\027.idadebug.DbgB"
  "reakpoint\032\026.google.protobuf.Empty\"\000\022F\n\021t"
  "oggle_breakpoint\022\027.idadebug.DbgBreakpoin"
  "t\032\026.google.protobuf.Empty\"\000\022F\n\021update_br"
  "eakpoint\022\027.idadebug.DbgBreakpoint\032\026.goog"
  "le.protobuf.Empty\"\000\022C\n\016del_breakpoint\022\027."
  "idadebug.DbgBreakpoint\032\026.google.protobuf"
  ".Empty\"\000\022E\n\021clear_breakpoints\022\026.google.p"
  "rotobuf.Empty\032\026.google.protobuf.Empty\"\000\022"
  "9\n\005pause\022\026.google.protobuf.Empty\032\026.googl"
  "e.protobuf.Empty\"\000\022:\n\006resume\022\026.google.pr"
  "otobuf.Empty\032\026.google.protobuf.Empty\"\000\022C"
  "\n\017start_emulation\022\026.google.protobuf.Empt"
  "y\032\026.google.protobuf.Empty\"\000\022B\n\016exit_emul"
  "ation\022\026.google.protobuf.Empty\032\026.google.p"
  "rotobuf.Empty\"\000\022=\n\tstep_into\022\026.google.pr"
  "otobuf.Empty\032\026.google.protobuf.Empty\"\000\022="
  "\n\tstep_over\022\026.google.protobuf.Empty\032\026.go"
  "ogle.protobuf.Empty\"\000\022>\n\rget_callstack\022\026"
  ".google.protobuf.Empty\032\023.idadebug.Callst"
  "ack\"\0002\310\001\n\tDbgClient\022\?\n\013start_event\022\026.goo"
  "gle.protobuf.Empty\032\026.google.protobuf.Emp"
  "ty\"\000\022\?\n\013pause_event\022\026.idadebug.PauseChan"
  "ged\032\026.google.protobuf.Empty\"\000\0229\n\nstop_ev"
  "ent\022\021.idadebug.Changed\032\026.google.protobuf"
  ".Empty\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_debug_5fproto_5f68k_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_debug_5fproto_5f68k_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_debug_5fproto_5f68k_2eproto = {
    false, false, 3616, descriptor_table_protodef_debug_5fproto_5f68k_2eproto,
    "debug_proto_68k.proto",
    &descriptor_table_debug_5fproto_5f68k_2eproto_once, descriptor_table_debug_5fproto_5f68k_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_debug_5fproto_5f68k_2eproto::offsets,
    file_level_metadata_debug_5fproto_5f68k_2eproto, file_level_enum_descriptors_debug_5fproto_5f68k_2eproto,
    file_level_service_descriptors_debug_5fproto_5f68k_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_debug_5fproto_5f68k_2eproto_getter() {
  return &descriptor_table_debug_5fproto_5f68k_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_debug_5fproto_5f68k_2eproto(&descriptor_table_debug_5fproto_5f68k_2eproto);
namespace idadebug {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpRegsEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[0];
}
bool GpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 12:
    case 14:
    case 16:
    case 18:
    case 20:
    case 22:
    case 24:
    case 26:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VdpRegsEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[1];
}
bool VdpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[2];
}
bool BpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpReg::_Internal {
 public:
};

GpReg::GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpReg)
}
GpReg::GpReg(const GpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpReg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reg_ = from._impl_.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.GpReg)
}

inline void GpReg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpReg::~GpReg() {
  // @@protoc_insertion_point(destructor:idadebug.GpReg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpReg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpReg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::GpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpReg)
  return target;
}

size_t GpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpReg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpReg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpReg::GetClassData() const { return &_class_data_; }


void GpReg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpReg*>(&to_msg);
  auto& from = static_cast<const GpReg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpReg::CopyFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpReg::IsInitialized() const {
  return true;
}

void GpReg::InternalSwap(GpReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpReg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[0]);
}

// ===================================================================

class GpRegs::_Internal {
 public:
};

GpRegs::GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegs)
}
GpRegs::GpRegs(const GpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpRegs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.d0_){}
    , decltype(_impl_.d1_){}
    , decltype(_impl_.d2_){}
    , decltype(_impl_.d3_){}
    , decltype(_impl_.d4_){}
    , decltype(_impl_.d5_){}
    , decltype(_impl_.d6_){}
    , decltype(_impl_.d7_){}
    , decltype(_impl_.a0_){}
    , decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , decltype(_impl_.a7_){}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.sp_){}
    , decltype(_impl_.sr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.d0_, &from._impl_.d0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sr_) -
    reinterpret_cast<char*>(&_impl_.d0_)) + sizeof(_impl_.sr_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegs)
}

inline void GpRegs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.d0_){0u}
    , decltype(_impl_.d1_){0u}
    , decltype(_impl_.d2_){0u}
    , decltype(_impl_.d3_){0u}
    , decltype(_impl_.d4_){0u}
    , decltype(_impl_.d5_){0u}
    , decltype(_impl_.d6_){0u}
    , decltype(_impl_.d7_){0u}
    , decltype(_impl_.a0_){0u}
    , decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , decltype(_impl_.a3_){0u}
    , decltype(_impl_.a4_){0u}
    , decltype(_impl_.a5_){0u}
    , decltype(_impl_.a6_){0u}
    , decltype(_impl_.a7_){0u}
    , decltype(_impl_.pc_){0u}
    , decltype(_impl_.sp_){0u}
    , decltype(_impl_.sr_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpRegs::~GpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpRegs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.d0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sr_) -
      reinterpret_cast<char*>(&_impl_.d0_)) + sizeof(_impl_.sr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 D0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.d0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.d1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.d2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.d3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.d4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.d5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.d6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 D7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.d7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.a0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A6 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 A7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.a7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PC = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SP = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SR = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.sr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpRegs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d0(), target);
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_d1(), target);
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_d2(), target);
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_d3(), target);
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_d4(), target);
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_d5(), target);
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_d6(), target);
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_d7(), target);
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_a0(), target);
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_a1(), target);
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_a2(), target);
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_a3(), target);
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_a4(), target);
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_a5(), target);
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_a6(), target);
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_a7(), target);
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pc(), target);
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sp(), target);
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_sr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegs)
  return target;
}

size_t GpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->_internal_d0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d0());
  }

  // uint32 D1 = 2;
  if (this->_internal_d1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d1());
  }

  // uint32 D2 = 3;
  if (this->_internal_d2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d2());
  }

  // uint32 D3 = 4;
  if (this->_internal_d3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d3());
  }

  // uint32 D4 = 5;
  if (this->_internal_d4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d4());
  }

  // uint32 D5 = 6;
  if (this->_internal_d5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d5());
  }

  // uint32 D6 = 7;
  if (this->_internal_d6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d6());
  }

  // uint32 D7 = 8;
  if (this->_internal_d7() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d7());
  }

  // uint32 A0 = 9;
  if (this->_internal_a0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a0());
  }

  // uint32 A1 = 10;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 A2 = 11;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  // uint32 A3 = 12;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a3());
  }

  // uint32 A4 = 13;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a4());
  }

  // uint32 A5 = 14;
  if (this->_internal_a5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a5());
  }

  // uint32 A6 = 15;
  if (this->_internal_a6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a6());
  }

  // uint32 A7 = 16;
  if (this->_internal_a7() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_a7());
  }

  // uint32 PC = 17;
  if (this->_internal_pc() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pc());
  }

  // uint32 SP = 18;
  if (this->_internal_sp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sp());
  }

  // uint32 SR = 19;
  if (this->_internal_sr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpRegs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpRegs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpRegs::GetClassData() const { return &_class_data_; }


void GpRegs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpRegs*>(&to_msg);
  auto& from = static_cast<const GpRegs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_d0() != 0) {
    _this->_internal_set_d0(from._internal_d0());
  }
  if (from._internal_d1() != 0) {
    _this->_internal_set_d1(from._internal_d1());
  }
  if (from._internal_d2() != 0) {
    _this->_internal_set_d2(from._internal_d2());
  }
  if (from._internal_d3() != 0) {
    _this->_internal_set_d3(from._internal_d3());
  }
  if (from._internal_d4() != 0) {
    _this->_internal_set_d4(from._internal_d4());
  }
  if (from._internal_d5() != 0) {
    _this->_internal_set_d5(from._internal_d5());
  }
  if (from._internal_d6() != 0) {
    _this->_internal_set_d6(from._internal_d6());
  }
  if (from._internal_d7() != 0) {
    _this->_internal_set_d7(from._internal_d7());
  }
  if (from._internal_a0() != 0) {
    _this->_internal_set_a0(from._internal_a0());
  }
  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  if (from._internal_a7() != 0) {
    _this->_internal_set_a7(from._internal_a7());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_sp() != 0) {
    _this->_internal_set_sp(from._internal_sp());
  }
  if (from._internal_sr() != 0) {
    _this->_internal_set_sr(from._internal_sr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpRegs::CopyFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegs::IsInitialized() const {
  return true;
}

void GpRegs::InternalSwap(GpRegs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.sr_)
      + sizeof(GpRegs::_impl_.sr_)
      - PROTOBUF_FIELD_OFFSET(GpRegs, _impl_.d0_)>(
          reinterpret_cast<char*>(&_impl_.d0_),
          reinterpret_cast<char*>(&other->_impl_.d0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[1]);
}

// ===================================================================

class GpRegValue::_Internal {
 public:
};

GpRegValue::GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegValue)
}
GpRegValue::GpRegValue(const GpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GpRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegValue)
}

inline void GpRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GpRegValue::~GpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::GpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegValue)
  return target;
}

size_t GpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpRegValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GpRegValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpRegValue::GetClassData() const { return &_class_data_; }


void GpRegValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GpRegValue*>(&to_msg);
  auto& from = static_cast<const GpRegValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpRegValue::CopyFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegValue::IsInitialized() const {
  return true;
}

void GpRegValue::InternalSwap(GpRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.value_)
      + sizeof(GpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(GpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[2]);
}

// ===================================================================

class VdpReg::_Internal {
 public:
};

VdpReg::VdpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpReg)
}
VdpReg::VdpReg(const VdpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VdpReg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reg_ = from._impl_.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpReg)
}

inline void VdpReg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpReg::~VdpReg() {
  // @@protoc_insertion_point(destructor:idadebug.VdpReg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpReg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpReg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpReg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::VdpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpReg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpReg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpReg)
  return target;
}

size_t VdpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpReg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->_internal_reg() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VdpReg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VdpReg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VdpReg::GetClassData() const { return &_class_data_; }


void VdpReg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VdpReg*>(&to_msg);
  auto& from = static_cast<const VdpReg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpReg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reg() != 0) {
    _this->_internal_set_reg(from._internal_reg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VdpReg::CopyFrom(const VdpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpReg::IsInitialized() const {
  return true;
}

void VdpReg::InternalSwap(VdpReg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.reg_, other->_impl_.reg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpReg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[3]);
}

// ===================================================================

class VdpRegs::_Internal {
 public:
};

VdpRegs::VdpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegs)
}
VdpRegs::VdpRegs(const VdpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VdpRegs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v00_){}
    , decltype(_impl_.v01_){}
    , decltype(_impl_.v02_){}
    , decltype(_impl_.v03_){}
    , decltype(_impl_.v04_){}
    , decltype(_impl_.v05_){}
    , decltype(_impl_.v06_){}
    , decltype(_impl_.v07_){}
    , decltype(_impl_.v08_){}
    , decltype(_impl_.v09_){}
    , decltype(_impl_.v0a_){}
    , decltype(_impl_.v0b_){}
    , decltype(_impl_.v0c_){}
    , decltype(_impl_.v0d_){}
    , decltype(_impl_.v0e_){}
    , decltype(_impl_.v0f_){}
    , decltype(_impl_.v10_){}
    , decltype(_impl_.v11_){}
    , decltype(_impl_.v12_){}
    , decltype(_impl_.v13_){}
    , decltype(_impl_.v14_){}
    , decltype(_impl_.v15_){}
    , decltype(_impl_.v16_){}
    , decltype(_impl_.v17_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.v00_, &from._impl_.v00_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.v17_) -
    reinterpret_cast<char*>(&_impl_.v00_)) + sizeof(_impl_.v17_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegs)
}

inline void VdpRegs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v00_){0u}
    , decltype(_impl_.v01_){0u}
    , decltype(_impl_.v02_){0u}
    , decltype(_impl_.v03_){0u}
    , decltype(_impl_.v04_){0u}
    , decltype(_impl_.v05_){0u}
    , decltype(_impl_.v06_){0u}
    , decltype(_impl_.v07_){0u}
    , decltype(_impl_.v08_){0u}
    , decltype(_impl_.v09_){0u}
    , decltype(_impl_.v0a_){0u}
    , decltype(_impl_.v0b_){0u}
    , decltype(_impl_.v0c_){0u}
    , decltype(_impl_.v0d_){0u}
    , decltype(_impl_.v0e_){0u}
    , decltype(_impl_.v0f_){0u}
    , decltype(_impl_.v10_){0u}
    , decltype(_impl_.v11_){0u}
    , decltype(_impl_.v12_){0u}
    , decltype(_impl_.v13_){0u}
    , decltype(_impl_.v14_){0u}
    , decltype(_impl_.v15_){0u}
    , decltype(_impl_.v16_){0u}
    , decltype(_impl_.v17_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpRegs::~VdpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpRegs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.v00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.v17_) -
      reinterpret_cast<char*>(&_impl_.v00_)) + sizeof(_impl_.v17_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpRegs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 V00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.v00_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.v01_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.v02_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V03 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.v03_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V04 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.v04_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V05 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.v05_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V06 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.v06_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V07 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.v07_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V08 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.v08_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V09 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.v09_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0A = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.v0a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0B = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.v0b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0C = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.v0c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0D = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.v0d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0E = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.v0e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V0F = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.v0f_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V10 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.v10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V11 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.v11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V12 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.v12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V13 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.v13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V14 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.v14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V15 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.v15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V16 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.v16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 V17 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.v17_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpRegs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_v00(), target);
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v01(), target);
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_v02(), target);
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v03(), target);
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_v04(), target);
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_v05(), target);
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_v06(), target);
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_v07(), target);
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_v08(), target);
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_v09(), target);
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_v0a(), target);
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_v0b(), target);
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_v0c(), target);
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_v0d(), target);
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_v0e(), target);
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_v0f(), target);
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_v10(), target);
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_v11(), target);
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_v12(), target);
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_v13(), target);
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_v14(), target);
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_v15(), target);
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_v16(), target);
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_v17(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegs)
  return target;
}

size_t VdpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->_internal_v00() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v00());
  }

  // uint32 V01 = 2;
  if (this->_internal_v01() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v01());
  }

  // uint32 V02 = 3;
  if (this->_internal_v02() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v02());
  }

  // uint32 V03 = 4;
  if (this->_internal_v03() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v03());
  }

  // uint32 V04 = 5;
  if (this->_internal_v04() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v04());
  }

  // uint32 V05 = 6;
  if (this->_internal_v05() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v05());
  }

  // uint32 V06 = 7;
  if (this->_internal_v06() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v06());
  }

  // uint32 V07 = 8;
  if (this->_internal_v07() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v07());
  }

  // uint32 V08 = 9;
  if (this->_internal_v08() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v08());
  }

  // uint32 V09 = 10;
  if (this->_internal_v09() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v09());
  }

  // uint32 V0A = 11;
  if (this->_internal_v0a() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0a());
  }

  // uint32 V0B = 12;
  if (this->_internal_v0b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0b());
  }

  // uint32 V0C = 13;
  if (this->_internal_v0c() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0c());
  }

  // uint32 V0D = 14;
  if (this->_internal_v0d() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0d());
  }

  // uint32 V0E = 15;
  if (this->_internal_v0e() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_v0e());
  }

  // uint32 V0F = 16;
  if (this->_internal_v0f() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v0f());
  }

  // uint32 V10 = 17;
  if (this->_internal_v10() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v10());
  }

  // uint32 V11 = 18;
  if (this->_internal_v11() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v11());
  }

  // uint32 V12 = 19;
  if (this->_internal_v12() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v12());
  }

  // uint32 V13 = 20;
  if (this->_internal_v13() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v13());
  }

  // uint32 V14 = 21;
  if (this->_internal_v14() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v14());
  }

  // uint32 V15 = 22;
  if (this->_internal_v15() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v15());
  }

  // uint32 V16 = 23;
  if (this->_internal_v16() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v16());
  }

  // uint32 V17 = 24;
  if (this->_internal_v17() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_v17());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VdpRegs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VdpRegs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VdpRegs::GetClassData() const { return &_class_data_; }


void VdpRegs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VdpRegs*>(&to_msg);
  auto& from = static_cast<const VdpRegs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_v00() != 0) {
    _this->_internal_set_v00(from._internal_v00());
  }
  if (from._internal_v01() != 0) {
    _this->_internal_set_v01(from._internal_v01());
  }
  if (from._internal_v02() != 0) {
    _this->_internal_set_v02(from._internal_v02());
  }
  if (from._internal_v03() != 0) {
    _this->_internal_set_v03(from._internal_v03());
  }
  if (from._internal_v04() != 0) {
    _this->_internal_set_v04(from._internal_v04());
  }
  if (from._internal_v05() != 0) {
    _this->_internal_set_v05(from._internal_v05());
  }
  if (from._internal_v06() != 0) {
    _this->_internal_set_v06(from._internal_v06());
  }
  if (from._internal_v07() != 0) {
    _this->_internal_set_v07(from._internal_v07());
  }
  if (from._internal_v08() != 0) {
    _this->_internal_set_v08(from._internal_v08());
  }
  if (from._internal_v09() != 0) {
    _this->_internal_set_v09(from._internal_v09());
  }
  if (from._internal_v0a() != 0) {
    _this->_internal_set_v0a(from._internal_v0a());
  }
  if (from._internal_v0b() != 0) {
    _this->_internal_set_v0b(from._internal_v0b());
  }
  if (from._internal_v0c() != 0) {
    _this->_internal_set_v0c(from._internal_v0c());
  }
  if (from._internal_v0d() != 0) {
    _this->_internal_set_v0d(from._internal_v0d());
  }
  if (from._internal_v0e() != 0) {
    _this->_internal_set_v0e(from._internal_v0e());
  }
  if (from._internal_v0f() != 0) {
    _this->_internal_set_v0f(from._internal_v0f());
  }
  if (from._internal_v10() != 0) {
    _this->_internal_set_v10(from._internal_v10());
  }
  if (from._internal_v11() != 0) {
    _this->_internal_set_v11(from._internal_v11());
  }
  if (from._internal_v12() != 0) {
    _this->_internal_set_v12(from._internal_v12());
  }
  if (from._internal_v13() != 0) {
    _this->_internal_set_v13(from._internal_v13());
  }
  if (from._internal_v14() != 0) {
    _this->_internal_set_v14(from._internal_v14());
  }
  if (from._internal_v15() != 0) {
    _this->_internal_set_v15(from._internal_v15());
  }
  if (from._internal_v16() != 0) {
    _this->_internal_set_v16(from._internal_v16());
  }
  if (from._internal_v17() != 0) {
    _this->_internal_set_v17(from._internal_v17());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VdpRegs::CopyFrom(const VdpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegs::IsInitialized() const {
  return true;
}

void VdpRegs::InternalSwap(VdpRegs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v17_)
      + sizeof(VdpRegs::_impl_.v17_)
      - PROTOBUF_FIELD_OFFSET(VdpRegs, _impl_.v00_)>(
          reinterpret_cast<char*>(&_impl_.v00_),
          reinterpret_cast<char*>(&other->_impl_.v00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpRegs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[4]);
}

// ===================================================================

class VdpRegValue::_Internal {
 public:
};

VdpRegValue::VdpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegValue)
}
VdpRegValue::VdpRegValue(const VdpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VdpRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegValue)
}

inline void VdpRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VdpRegValue::~VdpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VdpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VdpRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VdpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::VdpRegsEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VdpRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegValue)
  return target;
}

size_t VdpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VdpRegValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VdpRegValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VdpRegValue::GetClassData() const { return &_class_data_; }


void VdpRegValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VdpRegValue*>(&to_msg);
  auto& from = static_cast<const VdpRegValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VdpRegValue::CopyFrom(const VdpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegValue::IsInitialized() const {
  return true;
}

void VdpRegValue::InternalSwap(VdpRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.value_)
      + sizeof(VdpRegValue::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(VdpRegValue, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpRegValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[5]);
}

// ===================================================================

class DmaInfo::_Internal {
 public:
};

DmaInfo::DmaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DmaInfo)
}
DmaInfo::DmaInfo(const DmaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmaInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.len_){}
    , decltype(_impl_.src_){}
    , decltype(_impl_.dst_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.len_, &from._impl_.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dst_) -
    reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.dst_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DmaInfo)
}

inline void DmaInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.len_){0u}
    , decltype(_impl_.src_){0u}
    , decltype(_impl_.dst_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmaInfo::~DmaInfo() {
  // @@protoc_insertion_point(destructor:idadebug.DmaInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmaInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DmaInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dst_) -
      reinterpret_cast<char*>(&_impl_.len_)) + sizeof(_impl_.dst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmaInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmaInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DmaInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_len(), target);
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src(), target);
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DmaInfo)
  return target;
}

size_t DmaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DmaInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->_internal_len() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_len());
  }

  // uint32 src = 2;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  // uint32 dst = 3;
  if (this->_internal_dst() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmaInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmaInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmaInfo::GetClassData() const { return &_class_data_; }


void DmaInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmaInfo*>(&to_msg);
  auto& from = static_cast<const DmaInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DmaInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_len() != 0) {
    _this->_internal_set_len(from._internal_len());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_dst() != 0) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmaInfo::CopyFrom(const DmaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DmaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmaInfo::IsInitialized() const {
  return true;
}

void DmaInfo::InternalSwap(DmaInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.dst_)
      + sizeof(DmaInfo::_impl_.dst_)
      - PROTOBUF_FIELD_OFFSET(DmaInfo, _impl_.len_)>(
          reinterpret_cast<char*>(&_impl_.len_),
          reinterpret_cast<char*>(&other->_impl_.len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmaInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[6]);
}

// ===================================================================

class MemoryAS::_Internal {
 public:
};

MemoryAS::MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAS)
}
MemoryAS::MemoryAS(const MemoryAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryAS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAS)
}

inline void MemoryAS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemoryAS::~MemoryAS() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryAS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryAS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryAS::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryAS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAS)
  return target;
}

size_t MemoryAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  // uint32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryAS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryAS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryAS::GetClassData() const { return &_class_data_; }


void MemoryAS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryAS*>(&to_msg);
  auto& from = static_cast<const MemoryAS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryAS::CopyFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAS::IsInitialized() const {
  return true;
}

void MemoryAS::InternalSwap(MemoryAS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.size_)
      + sizeof(MemoryAS::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(MemoryAS, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[7]);
}

// ===================================================================

class MemoryAD::_Internal {
 public:
};

MemoryAD::MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAD)
}
MemoryAD::MemoryAD(const MemoryAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAD)
}

inline void MemoryAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.address_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryAD::~MemoryAD() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MemoryAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryAD::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAD)
  return target;
}

size_t MemoryAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryAD::GetClassData() const { return &_class_data_; }


void MemoryAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryAD*>(&to_msg);
  auto& from = static_cast<const MemoryAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryAD::CopyFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAD::IsInitialized() const {
  return true;
}

void MemoryAD::InternalSwap(MemoryAD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[8]);
}

// ===================================================================

class DbgBreakpoint::_Internal {
 public:
};

DbgBreakpoint::DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoint)
}
DbgBreakpoint::DbgBreakpoint(const DbgBreakpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DbgBreakpoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.bstart_){}
    , decltype(_impl_.bend_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.is_vdp_){}
    , decltype(_impl_.is_forbid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_condition().empty()) {
    _this->_impl_.condition_.Set(from._internal_condition(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_forbid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_forbid_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoint)
}

inline void DbgBreakpoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.condition_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.bstart_){0u}
    , decltype(_impl_.bend_){0u}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.is_vdp_){false}
    , decltype(_impl_.is_forbid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.condition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.condition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DbgBreakpoint::~DbgBreakpoint() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DbgBreakpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.condition_.Destroy();
}

void DbgBreakpoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DbgBreakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.condition_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_forbid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_forbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .idadebug.BpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idadebug::BpType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 bstart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_vdp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_vdp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_forbid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_forbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string condition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_condition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "idadebug.DbgBreakpoint.condition"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DbgBreakpoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bstart(), target);
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bend(), target);
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_vdp(), target);
  }

  // bool is_forbid = 6;
  if (this->_internal_is_forbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_forbid(), target);
  }

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_condition().data(), static_cast<int>(this->_internal_condition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idadebug.DbgBreakpoint.condition");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_condition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoint)
  return target;
}

size_t DbgBreakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string condition = 7;
  if (!this->_internal_condition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_condition());
  }

  // .idadebug.BpType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 bstart = 2;
  if (this->_internal_bstart() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bstart());
  }

  // uint32 bend = 3;
  if (this->_internal_bend() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bend());
  }

  // bool enabled = 4;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vdp = 5;
  if (this->_internal_is_vdp() != 0) {
    total_size += 1 + 1;
  }

  // bool is_forbid = 6;
  if (this->_internal_is_forbid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbgBreakpoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DbgBreakpoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbgBreakpoint::GetClassData() const { return &_class_data_; }


void DbgBreakpoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DbgBreakpoint*>(&to_msg);
  auto& from = static_cast<const DbgBreakpoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_condition().empty()) {
    _this->_internal_set_condition(from._internal_condition());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bstart() != 0) {
    _this->_internal_set_bstart(from._internal_bstart());
  }
  if (from._internal_bend() != 0) {
    _this->_internal_set_bend(from._internal_bend());
  }
  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_is_vdp() != 0) {
    _this->_internal_set_is_vdp(from._internal_is_vdp());
  }
  if (from._internal_is_forbid() != 0) {
    _this->_internal_set_is_forbid(from._internal_is_forbid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DbgBreakpoint::CopyFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoint::IsInitialized() const {
  return true;
}

void DbgBreakpoint::InternalSwap(DbgBreakpoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.condition_, lhs_arena,
      &other->_impl_.condition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.is_forbid_)
      + sizeof(DbgBreakpoint::_impl_.is_forbid_)
      - PROTOBUF_FIELD_OFFSET(DbgBreakpoint, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[9]);
}

// ===================================================================

class DbgBreakpoints::_Internal {
 public:
};

DbgBreakpoints::DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoints)
}
DbgBreakpoints::DbgBreakpoints(const DbgBreakpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DbgBreakpoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoints)
}

inline void DbgBreakpoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DbgBreakpoints::~DbgBreakpoints() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DbgBreakpoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void DbgBreakpoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DbgBreakpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .idadebug.DbgBreakpoint list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DbgBreakpoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoints)
  return target;
}

size_t DbgBreakpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbgBreakpoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DbgBreakpoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbgBreakpoints::GetClassData() const { return &_class_data_; }


void DbgBreakpoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DbgBreakpoints*>(&to_msg);
  auto& from = static_cast<const DbgBreakpoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DbgBreakpoints::CopyFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoints::IsInitialized() const {
  return true;
}

void DbgBreakpoints::InternalSwap(DbgBreakpoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[10]);
}

// ===================================================================

class Callstack::_Internal {
 public:
};

Callstack::Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.Callstack)
}
Callstack::Callstack(const Callstack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Callstack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.callstack_){from._impl_.callstack_}
    , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Callstack)
}

inline void Callstack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.callstack_){arena}
    , /*decltype(_impl_._callstack_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:idadebug.Callstack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Callstack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.callstack_.~RepeatedField();
}

void Callstack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Callstack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.callstack_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Callstack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 callstack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_callstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_callstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Callstack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Callstack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    int byte_size = _impl_._callstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_callstack(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Callstack)
  return target;
}

size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Callstack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.callstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._callstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Callstack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Callstack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Callstack::GetClassData() const { return &_class_data_; }


void Callstack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Callstack*>(&to_msg);
  auto& from = static_cast<const Callstack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.callstack_.MergeFrom(from._impl_.callstack_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callstack::IsInitialized() const {
  return true;
}

void Callstack::InternalSwap(Callstack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.callstack_.InternalSwap(&other->_impl_.callstack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Callstack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[11]);
}

// ===================================================================

class AnyRegValue::_Internal {
 public:
};

AnyRegValue::AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.AnyRegValue)
}
AnyRegValue::AnyRegValue(const AnyRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnyRegValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:idadebug.AnyRegValue)
}

inline void AnyRegValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnyRegValue::~AnyRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.AnyRegValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnyRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnyRegValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnyRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.AnyRegValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyRegValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnyRegValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.AnyRegValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.AnyRegValue)
  return target;
}

size_t AnyRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.AnyRegValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyRegValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnyRegValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyRegValue::GetClassData() const { return &_class_data_; }


void AnyRegValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnyRegValue*>(&to_msg);
  auto& from = static_cast<const AnyRegValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyRegValue::CopyFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRegValue::IsInitialized() const {
  return true;
}

void AnyRegValue::InternalSwap(AnyRegValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyRegValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[12]);
}

// ===================================================================

class MemData::_Internal {
 public:
};

MemData::MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemData)
}
MemData::MemData(const MemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:idadebug.MemData)
}

inline void MemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemData::~MemData() {
  // @@protoc_insertion_point(destructor:idadebug.MemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemData)
  return target;
}

size_t MemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemData::GetClassData() const { return &_class_data_; }


void MemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemData*>(&to_msg);
  auto& from = static_cast<const MemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemData::CopyFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemData::IsInitialized() const {
  return true;
}

void MemData::InternalSwap(MemData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[13]);
}

// ===================================================================

PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse() {}
PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged_ChangedEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[14]);
}

// ===================================================================

class PauseChanged::_Internal {
 public:
};

PauseChanged::PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PauseChanged::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:idadebug.PauseChanged)
}
PauseChanged::PauseChanged(const PauseChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PauseChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{}
    , decltype(_impl_.address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  _this->_impl_.address_ = from._impl_.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.PauseChanged)
}

inline void PauseChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.address_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PauseChanged::~PauseChanged() {
  // @@protoc_insertion_point(destructor:idadebug.PauseChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PauseChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changed_.Destruct();
  _impl_.changed_.~MapField();
}

void PauseChanged::ArenaDtor(void* object) {
  PauseChanged* _this = reinterpret_cast< PauseChanged* >(object);
  _this->_impl_.changed_.Destruct();
}
void PauseChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.PauseChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _impl_.address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.PauseChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // map<uint32, uint32> changed = 2;
  if (!this->_internal_changed().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PauseChanged_ChangedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_changed();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.PauseChanged)
  return target;
}

size_t PauseChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.PauseChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += PauseChanged_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PauseChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseChanged::GetClassData() const { return &_class_data_; }


void PauseChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PauseChanged*>(&to_msg);
  auto& from = static_cast<const PauseChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseChanged::CopyFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChanged::IsInitialized() const {
  return true;
}

void PauseChanged::InternalSwap(PauseChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
  swap(_impl_.address_, other->_impl_.address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[15]);
}

// ===================================================================

Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse() {}
Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Changed_ChangedEntry_DoNotUse::MergeFrom(const Changed_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Changed_ChangedEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[16]);
}

// ===================================================================

class Changed::_Internal {
 public:
};

Changed::Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Changed::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:idadebug.Changed)
}
Changed::Changed(const Changed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Changed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Changed)
}

inline void Changed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.changed_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Changed::~Changed() {
  // @@protoc_insertion_point(destructor:idadebug.Changed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Changed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.changed_.Destruct();
  _impl_.changed_.~MapField();
}

void Changed::ArenaDtor(void* object) {
  Changed* _this = reinterpret_cast< Changed* >(object);
  _this->_impl_.changed_.Destruct();
}
void Changed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Changed::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Changed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.changed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Changed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, uint32> changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Changed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Changed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  if (!this->_internal_changed().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = Changed_ChangedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_changed();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Changed)
  return target;
}

size_t Changed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Changed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += Changed_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Changed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Changed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Changed::GetClassData() const { return &_class_data_; }


void Changed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Changed*>(&to_msg);
  auto& from = static_cast<const Changed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.changed_.MergeFrom(from._impl_.changed_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Changed::CopyFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Changed::IsInitialized() const {
  return true;
}

void Changed::InternalSwap(Changed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.changed_.InternalSwap(&other->_impl_.changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Changed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_debug_5fproto_5f68k_2eproto_getter, &descriptor_table_debug_5fproto_5f68k_2eproto_once,
      file_level_metadata_debug_5fproto_5f68k_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idadebug::GpReg*
Arena::CreateMaybeMessage< ::idadebug::GpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegs*
Arena::CreateMaybeMessage< ::idadebug::GpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegValue*
Arena::CreateMaybeMessage< ::idadebug::GpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpReg*
Arena::CreateMaybeMessage< ::idadebug::VdpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegs*
Arena::CreateMaybeMessage< ::idadebug::VdpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegValue*
Arena::CreateMaybeMessage< ::idadebug::VdpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DmaInfo*
Arena::CreateMaybeMessage< ::idadebug::DmaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DmaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAS*
Arena::CreateMaybeMessage< ::idadebug::MemoryAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAS >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAD*
Arena::CreateMaybeMessage< ::idadebug::MemoryAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAD >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoint*
Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoints*
Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Callstack*
Arena::CreateMaybeMessage< ::idadebug::Callstack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Callstack >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::AnyRegValue*
Arena::CreateMaybeMessage< ::idadebug::AnyRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::AnyRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemData*
Arena::CreateMaybeMessage< ::idadebug::MemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged_ChangedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged*
Arena::CreateMaybeMessage< ::idadebug::PauseChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed_ChangedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::idadebug::Changed_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed*
Arena::CreateMaybeMessage< ::idadebug::Changed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
